{"version":3,"file":"static/js/3401.c8a50702.chunk.js","mappings":"6NAYA,MAoBA,EApBiBA,KAGbC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAC,UACbF,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CAAAD,UACTE,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,KAAI,CAAAJ,SAAA,EACRF,EAAAA,EAAAA,KAACK,EAAAA,EAAKE,MAAK,CAAAL,SAAC,mCACZF,EAAAA,EAAAA,KAACK,EAAAA,EAAKG,KAAI,CAAAN,SAAC,qIAIXF,EAAAA,EAAAA,KAACS,EAAAA,GAAiB,CAAAP,UAChBF,EAAAA,EAAAA,KAACU,EAAAA,EAAW,CAACC,YAAa,c,iHChBtC,MAAMC,EAAkBC,EAAAA,GAAOC,GAAG;;;;EAM5BX,GAAaU,EAAAA,EAAAA,IAAOR,EAAAA,EAAK;;;;;;;IAO3BU,GAASA,EAAMC,aAAe;;IAK9BD,GAASA,EAAME,aAAeF,EAAMC,aAAe;;IAKnDD,GAASA,EAAMG,aAAe;EAM5BC,EAAeN,EAAAA,GAAOC,GAAG;;;WAGpBC,GACHA,EAAMC,YAAoB,SAC1BD,EAAMG,YAAoB,UAC1BH,EAAME,WAAmB,OACtB;EAILG,EAAeP,EAAAA,GAAOC,GAAG;WACpBC,GAASA,EAAMG,YAAc,MAAQ;iBAC/BH,GAASA,EAAMG,YAAc,OAAS;EAwEvD,EArE0BG,IAKnB,IALoB,cACzBC,EAAgB,KAAI,aACpBC,EAAe,KAAI,SACnBrB,EAAQ,iBACRsB,EAAmB,oEACpBH,EACC,MAAMI,GAAuBC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,aAAaA,eAC/DC,EAAmBC,OAAOC,KAAKN,GAAsBO,OAErDhB,EAA+B,OAAjBO,EACdL,EAAcF,GAAea,EAAmBN,EAChDU,GAA2BjB,OAC/BkB,EAAAA,EAAYC,cAAeD,EAAAA,EAAYE,cAAcC,mBAC9CR,GAAoBP,GAGvBgB,EAAetB,GAAeE,EAAce,EAElD,OACEjC,EAAAA,EAAAA,KAACY,EAAe,CAAAV,UACdF,EAAAA,EAAAA,KAACG,EAAU,CAACc,WAAYqB,EAAcpB,YAAaA,EAAaF,YAAaA,EAAYd,UACvFE,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,KAAI,CAAAJ,SAAA,EACRF,EAAAA,EAAAA,KAACmB,EAAY,CACXF,WAAYqB,EACZpB,YAAaA,EACbF,YAAaA,EAAYd,SAExBc,EAAc,eAAQsB,EAAe,eAAO,kBAG/CtC,EAAAA,EAAAA,KAACK,EAAAA,EAAKE,MAAK,CAAAL,SACRc,EAAc,kBAAoB,wBAGrChB,EAAAA,EAAAA,KAACoB,EAAY,CAACF,YAAaA,EAAYhB,SACpCc,GACCZ,EAAAA,EAAAA,MAAAmC,EAAAA,SAAA,CAAArC,SAAA,CAAE,YAAU2B,EAAiB,eAAaN,MAE1CnB,EAAAA,EAAAA,MAAAmC,EAAAA,SAAA,CAAArC,SAAA,CAAE,aAAW2B,EAAiB,MAAIP,OAIrCN,EACCE,GACElB,EAAAA,EAAAA,KAACK,EAAAA,EAAKG,KAAI,CAACgC,UAAU,cAAatC,SAC/BsB,KAGHxB,EAAAA,EAAAA,KAACK,EAAAA,EAAKG,KAAI,CAAAN,SACPA,IAIJ+B,GAKCjC,EAAAA,EAAAA,KAACK,EAAAA,EAAKG,KAAI,CAAAN,SACPA,KALHE,EAAAA,EAAAA,MAACC,EAAAA,EAAKG,KAAI,CAAAN,SAAA,CAAC,0CAC+BoB,EAAc,4BAUhD,C,yIC9GtB,MAAMmB,EAAe5B,EAAAA,GAAOC,GAAG;;;;;;EAQzB4B,EAAgB7B,EAAAA,GAAOC,GAAG;;;;YAIpBC,GAASA,EAAM4B,UAAY,UAAY;;;iBAGlC5B,GAASA,EAAM4B,UAAY,aAAe;;EAIrDC,EAAgB/B,EAAAA,GAAOC,GAAG;;;;;EAO1B+B,EAAoBhC,EAAAA,GAAOC,GAAG;;;EAK9BgC,EAAiBA,CAACC,EAAaC,KACnC,IAAKA,EAAY,OAAO,KACxB,MAAMC,EAASC,EAAAA,EAAYF,GAAYC,OACjCE,EAASrB,OAAOC,KAAKkB,GAAQG,IAAIC,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAElE,IAAK,IAAIC,EAAIN,EAAOnB,OAAS,EAAGyB,GAAK,EAAGA,IACtC,GAAIV,GAAeI,EAAOM,GACxB,OAAOR,EAAOE,EAAOM,IAGzB,OAAOR,EAAO,EAAE,EAGZS,EAAmBA,CAACX,EAAaC,KACrC,IAAKA,EAAY,MAAO,uDAExB,MAAMW,EAAWT,EAAAA,EAAYF,GAAYW,SACnCR,EAASrB,OAAOC,KAAK4B,GAAUP,IAAIC,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAEpE,IAAK,IAAIC,EAAIN,EAAOnB,OAAS,EAAGyB,GAAK,EAAGA,IACtC,GAAIV,GAAeI,EAAOM,GACxB,OAAOE,EAASR,EAAOM,IAG3B,OAAOE,EAAS,EAAE,EA+JpB,EAjIkBC,KAChB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,SAAEC,EAAQ,YAAEhB,EAAW,WAAEC,IAAetB,EAAAA,EAAAA,KAAYC,GAASA,EAAMqC,SACnEC,GAAevC,EAAAA,EAAAA,KAAYC,GAASA,EAAMuC,UAAUD,gBACnDE,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAmBC,IAAwBF,EAAAA,EAAAA,WAAS,IACpDG,EAAeC,IAAoBJ,EAAAA,EAAAA,WAAS,GAmDnD,OACEjE,EAAAA,EAAAA,MAACqC,EAAY,CAAAvC,SAAA,EACXF,EAAAA,EAAAA,KAAC0C,EAAa,CACZC,UAAWoB,EACXW,QAhCoBC,KACnBZ,GACLQ,GAAqB,EAAK,EA8BKrE,SAE1B6D,EAAWjB,EAAeC,EAAaC,GAAc,OAGvDe,IACC3D,EAAAA,EAAAA,MAACyC,EAAiB,CAAA3C,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAK4E,MAAO,CAAEC,aAAc,SAAUC,SAAU,SAAUC,MAAO,QAAS7E,SAAC,YAC3EF,EAAAA,EAAAA,KAACgF,EAAAA,EAAW,CACVC,IAxDoBC,MAC5B,MAAMC,EAPkBC,MACxB,IAAKpC,EAAY,OAAO,EACxB,MAAMC,EAASnB,OAAOC,KAAKmB,EAAAA,EAAYF,GAAYC,QAAQG,IAAIC,QAC/D,OAAOgC,KAAKC,OAAOrC,EAAO,EAITmC,GACjB,OAAOC,KAAKE,IAAKxC,EAAcoC,EAAY,IAAK,IAAI,EAsDvCD,GACLM,QAAQ,gBAKdxF,EAAAA,EAAAA,KAAC4C,EAAa,CAAA1C,SACX6D,EAAWL,EAAiBX,EAAaC,GAAc,0DAG1DhD,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CACLD,QAASzB,EAAW,iBAAmB,kBACvCW,QA/DmBgB,KACnB3B,EACFK,GAAe,IACM,OAAZH,QAAY,IAAZA,GAAAA,EAAc0B,KACvB9B,GAAS+B,EAAAA,EAAAA,OAGX,EAyDIC,KAAK,KAAI3F,SAER6D,EAAW,iBAAmB,gBAGjC3D,EAAAA,EAAAA,MAAC0F,EAAAA,EAAK,CAACC,KAAM5B,EAAa6B,OAAQA,IAAM5B,GAAe,GAAOlE,SAAA,EAC5DF,EAAAA,EAAAA,KAAC8F,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAAhG,UACvBF,EAAAA,EAAAA,KAAC8F,EAAAA,EAAMvF,MAAK,CAAAL,SAAC,8BAEfF,EAAAA,EAAAA,KAAC8F,EAAAA,EAAMxF,KAAI,CAAAJ,SAAC,wEAGZE,EAAAA,EAAAA,MAAC0F,EAAAA,EAAMK,OAAM,CAAAjG,SAAA,EACXF,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CAACD,QAAQ,YAAYd,QAASA,IAAMN,GAAe,GAAOlE,SAAC,YAGlEF,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CAACD,QAAQ,SAASd,QAASA,KAChCb,GAASuC,EAAAA,EAAAA,OACTvC,GAAS+B,EAAAA,EAAAA,OACTxB,GAAe,EAAM,EACrBlE,SAAC,yBAMPE,EAAAA,EAAAA,MAAC0F,EAAAA,EAAK,CAACC,KAAMzB,EAAmB0B,OAAQA,IAAMzB,GAAqB,GAAOrE,SAAA,EACxEF,EAAAA,EAAAA,KAAC8F,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAAhG,UACvBF,EAAAA,EAAAA,KAAC8F,EAAAA,EAAMvF,MAAK,CAAAL,SAAC,uBAEfF,EAAAA,EAAAA,KAAC8F,EAAAA,EAAMxF,KAAI,CAAAJ,SAAC,sIAGZE,EAAAA,EAAAA,MAAC0F,EAAAA,EAAMK,OAAM,CAAAjG,SAAA,EACXF,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CAACD,QAAQ,YAAYd,QAASA,IAAMH,GAAqB,GAAOrE,SAAC,YAGxEF,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CAACD,QAAQ,UAAUd,QAtFN2B,KAC1B,MAAMpD,EAASnB,OAAOC,KAAKmB,EAAAA,EAAYF,GAAYC,QAAQG,IAAIC,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAC1F,IAAI8C,EAAe,EACnB,IAAK,IAAIC,KAAStD,EACZF,GAAewD,IACjBD,EAAeC,GAInB,MAAMC,EAAa,CACjBb,KAAM,SACN3C,aACAD,cACAwD,MAAOzD,EAAeC,EAAaC,GACnCyD,KAAM,GAAGzD,EAAW0D,OAAO,GAAGC,cAAgB3D,EAAW4D,MAAM,eAAe7D,KAC9E8D,OAAQ3D,EAAAA,EAAYF,GAAY8D,QAAQR,IAG1CzC,GAASkD,EAAAA,EAAAA,IAAUP,IACnB3C,GAASuC,EAAAA,EAAAA,OACT7B,GAAqB,EAAM,EAkEkCrE,SAAC,2BAK/C,C,6EChNnB,SAASkD,EAAIlD,EAAU8G,GACrB,IAAIC,EAAQ,EACZ,OAAOC,EAAAA,SAAe9D,IAAIlD,GAAUiH,GAAsBD,EAAAA,eAAqBC,GAASH,EAAKG,EAAOF,KAAWE,GACjH,C,aC0BA,SAASC,EAAcnC,EAAKM,EAAKD,GAC/B,MAAM+B,GAAcpC,EAAMM,IAAQD,EAAMC,GAAO,IAC/C,OAAOF,KAAKiC,MAjCU,IAiCJD,GAjCI,GAkCxB,CACA,SAASE,EAAiBlG,EAavBmG,GAAK,IAbmB,IACzBjC,EAAG,IACHN,EAAG,IACHK,EAAG,MACHmC,EAAK,eACLC,EAAc,QACdC,EAAO,SACPC,EAAQ,UACRpF,EAAS,MACToC,EAAK,QACLY,EAAO,SACPqC,KACG9G,GACJM,EACC,OAAoBrB,EAAAA,EAAAA,KAAK,MAAO,CAC9BwH,IAAKA,KACFzG,EACH+G,KAAM,cACNtF,UAAWuF,IAAWvF,EAAW,GAAGqF,QAAgB,CAClD,CAAC,MAAMrC,KAAYA,EACnB,CAAC,GAAGqC,kBAA0BD,EAC9B,CAAC,GAAGC,iBAAyBD,GAAYD,IAE3C/C,MAAO,CACLoD,MAAO,GAAGZ,EAAcnC,EAAKM,EAAKD,SAC/BV,GAEL,gBAAiBK,EACjB,gBAAiBM,EACjB,gBAAiBD,EACjBpF,SAAUwH,GAA8B1H,EAAAA,EAAAA,KAAK,OAAQ,CACnDwC,UAAW,kBACXtC,SAAUuH,IACPA,GAET,CACA,MAAMzC,EAA2BkC,EAAAA,YAAiB,CAAAe,EAG/CT,KAAQ,IAHwC,QACjDU,GAAU,KACPC,GACJF,EACC,MAAMlH,EAAQ,CACZwE,IAAK,EACLD,IAAK,IACLsC,UAAU,EACVF,gBAAgB,EAChBC,SAAS,KACNQ,GAGL,GADApH,EAAM8G,UAAWO,EAAAA,EAAAA,IAAmBrH,EAAM8G,SAAU,YAChDK,EACF,OAAOX,EAAkBxG,EAAOyG,GAElC,MAAM,IACJjC,EAAG,IACHN,EAAG,IACHK,EAAG,MACHmC,EAAK,eACLC,EAAc,QACdC,EAAO,SACPC,EAAQ,SACRC,EAAQ,QACRrC,EAAO,UACPhD,EAAS,SACTtC,KACGmI,GACDtH,EACJ,OAAoBf,EAAAA,EAAAA,KAAK,MAAO,CAC9BwH,IAAKA,KACFa,EACH7F,UAAWuF,IAAWvF,EAAWqF,GACjC3H,SAAUA,EAAWkD,EAAIlD,GAAUiH,IAAsBmB,EAAAA,EAAAA,cAAanB,EAAO,CAC3Ee,SAAS,MACLX,EAAkB,CACtBhC,MACAN,MACAK,MACAmC,QACAC,iBACAC,UACAC,WACAC,WACArC,WACCgC,IACH,IAEJxC,EAAYuD,YAAc,cAC1B,S","sources":["components/Levels/Level161.js","components/UI/AchievementShrine.js","components/UI/FlowerPot.js","../node_modules/react-bootstrap/esm/ElementChildren.js","../node_modules/react-bootstrap/esm/ProgressBar.js"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel, markMechanicDiscovered } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport FlowerPot from '../UI/FlowerPot';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\n\r\nconst Level161 = () => {\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title>The levels become more sparse</Card.Title>\r\n          <Card.Text>\r\n            But it's only to avoid having too much fluff!\r\n            Why don't you see what else you can do with the levels you've already discovered?\r\n          </Card.Text>\r\n          <CenteredContainer>\r\n            <LevelButton targetLevel={158}></LevelButton>\r\n          </CenteredContainer>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level161;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from 'react-bootstrap';\r\nimport allAchievements from '../../data/achievements';\r\nimport LevelButton from './LevelButton';\r\nimport debugConfig from '../../config/debug';\r\n\r\nconst ShrineContainer = styled.div`\r\n  width: 100%;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border: 2px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.isMaxShrine && `\r\n    background: rgba(70, 0, 70, 0.1);\r\n    border: 2px solid purple;\r\n  `}\r\n  \r\n  ${props => props.isComplete && !props.isMaxShrine && `\r\n    background: rgba(255, 215, 0, 0.1);\r\n    border-color: gold;\r\n  `}\r\n\r\n  ${props => props.isOverLimit && `\r\n    background: rgba(255, 0, 0, 0.1);\r\n    border-color: red;\r\n  `}\r\n`;\r\n\r\nconst ShrineSymbol = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  color: ${props => {\r\n    if (props.isMaxShrine) return 'purple';\r\n    if (props.isOverLimit) return '#ff0000';\r\n    if (props.isComplete) return 'gold';\r\n    return '#666';\r\n  }};\r\n`;\r\n\r\nconst ProgressText = styled.div`\r\n  color: ${props => props.isOverLimit ? 'red' : 'inherit'};\r\n  font-weight: ${props => props.isOverLimit ? 'bold' : 'normal'};\r\n`;\r\n\r\nconst AchievementShrine = ({ \r\n  requiredCount = null,\r\n  maximumCount = null,\r\n  children,\r\n  overLimitMessage = \"Too many achievements! You must prestige to access this content.\"\r\n}) => {\r\n  const unlockedAchievements = useSelector(state => state.achievements.achievements);\r\n  const achievementCount = Object.keys(unlockedAchievements).length;\r\n  \r\n  const isMaxShrine = maximumCount !== null;\r\n  const isOverLimit = isMaxShrine && achievementCount > maximumCount;\r\n  const hasRequiredAchievements = !isMaxShrine && (\r\n    debugConfig.isDebugMode && debugConfig.debugFeatures.unlockAllShrines ? \r\n    true : achievementCount >= requiredCount\r\n  );\r\n  \r\n  const isAccessible = isMaxShrine ? !isOverLimit : hasRequiredAchievements;\r\n\r\n  return (\r\n    <ShrineContainer>\r\n      <StyledCard isComplete={isAccessible} isOverLimit={isOverLimit} isMaxShrine={isMaxShrine}>\r\n        <Card.Body>\r\n          <ShrineSymbol \r\n            isComplete={isAccessible} \r\n            isOverLimit={isOverLimit}\r\n            isMaxShrine={isMaxShrine}\r\n          >\r\n            {isMaxShrine ? '🔮' : (isAccessible ? '🔓' : '🔒')}\r\n          </ShrineSymbol>\r\n          \r\n          <Card.Title>\r\n            {isMaxShrine ? 'Prestige Shrine' : 'Achievement Shrine'}\r\n          </Card.Title>\r\n          \r\n          <ProgressText isOverLimit={isOverLimit}>\r\n            {isMaxShrine ? (\r\n              <>Current: {achievementCount} / Maximum: {maximumCount}</>\r\n            ) : (\r\n              <>Progress: {achievementCount} / {requiredCount}</>\r\n            )}\r\n          </ProgressText>\r\n          \r\n          {isMaxShrine ? (\r\n            isOverLimit ? (\r\n              <Card.Text className=\"text-danger\">\r\n                {overLimitMessage}\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          ) : (\r\n            !hasRequiredAchievements ? (\r\n              <Card.Text>\r\n                Return when you have unlocked at least {requiredCount} achievements...\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </ShrineContainer>\r\n  );\r\n};\r\n\r\nexport default AchievementShrine;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { plantSeed, removePlant } from '../../store/slices/flowerSlice';\r\nimport { Card, Button, Modal, ProgressBar } from 'react-bootstrap';\r\nimport flowerTypes from '../../data/flowerTypes';\r\nimport { equipItem } from '../../store/slices/inventorySlice';\r\n\r\nconst PotContainer = styled.div`\r\n  text-align: center;\r\n  margin: 2rem 0;\r\n  padding: 1rem;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst FlowerDisplay = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  transition: all 0.3s ease;\r\n  cursor: ${props => props.clickable ? 'pointer' : 'default'};\r\n  \r\n  &:hover {\r\n    transform: ${props => props.clickable ? 'scale(1.1)' : 'none'};\r\n  }\r\n`;\r\n\r\nconst FlowerMessage = styled.div`\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n  margin: 1rem 0;\r\n  font-style: italic;\r\n`;\r\n\r\nconst ProgressContainer = styled.div`\r\n  margin: 1rem 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst getFlowerStage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return null;\r\n  const stages = flowerTypes[flowerType].stages;\r\n  const levels = Object.keys(stages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return stages[levels[i]];\r\n    }\r\n  }\r\n  return stages[0];\r\n};\r\n\r\nconst getFlowerMessage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return \"An empty pot... ready for something special to grow.\";\r\n  \r\n  const messages = flowerTypes[flowerType].messages;\r\n  const levels = Object.keys(messages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return messages[levels[i]];\r\n    }\r\n  }\r\n  return messages[0];\r\n};\r\n\r\nconst getNextStageLevel = (currentLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const stages = Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .sort((a, b) => a - b);\r\n  \r\n  for (const level of stages) {\r\n    if (level > currentLevel) {\r\n      return level;\r\n    }\r\n  }\r\n  return stages[stages.length - 1];\r\n};\r\n\r\nconst getProgressPercentage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const currentLevel = growthLevel;\r\n  const nextLevel = getNextStageLevel(currentLevel, flowerType);\r\n  const prevLevel = Math.max(0, ...Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .filter(level => level <= currentLevel));\r\n  \r\n  const progress = currentLevel - prevLevel;\r\n  const total = nextLevel - prevLevel;\r\n  return Math.min((progress / total) * 100, 100);\r\n};\r\n\r\nconst FlowerPot = () => {\r\n  const dispatch = useDispatch();\r\n  const { hasPlant, growthLevel, flowerType } = useSelector(state => state.flower);\r\n  const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [showPickupWarning, setShowPickupWarning] = useState(false);\r\n  const [pendingPickup, setPendingPickup] = useState(false);\r\n\r\n  const getMaxGrowthLevel = () => {\r\n    if (!flowerType) return 0;\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number);\r\n    return Math.max(...stages);\r\n  };\r\n\r\n  const getProgressPercentage = () => {\r\n    const maxLevel = getMaxGrowthLevel();\r\n    return Math.min((growthLevel / maxLevel) * 100, 100);\r\n  };\r\n\r\n  const handlePlantClick = () => {\r\n    if (hasPlant) {\r\n      setShowConfirm(true);\r\n    } else if (equippedItem?.type === 'flower') {\r\n      dispatch(plantSeed());\r\n    } else {\r\n      dispatch(plantSeed());\r\n    }\r\n  };\r\n\r\n  const handleFlowerClick = () => {\r\n    if (!hasPlant) return;\r\n    setShowPickupWarning(true);\r\n  };\r\n\r\n  const handleConfirmPickup = () => {\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number).sort((a, b) => a - b);\r\n    let currentStage = 0;\r\n    for (let stage of stages) {\r\n      if (growthLevel >= stage) {\r\n        currentStage = stage;\r\n      }\r\n    }\r\n    \r\n    const flowerItem = {\r\n      type: 'flower',\r\n      flowerType,\r\n      growthLevel,\r\n      stage: getFlowerStage(growthLevel, flowerType),\r\n      name: `${flowerType.charAt(0).toUpperCase() + flowerType.slice(1)} (Growth: ${growthLevel})`,\r\n      weight: flowerTypes[flowerType].weights[currentStage]\r\n    };\r\n    \r\n    dispatch(equipItem(flowerItem));\r\n    dispatch(removePlant());\r\n    setShowPickupWarning(false);\r\n  };\r\n\r\n  return (\r\n    <PotContainer>\r\n      <FlowerDisplay \r\n        clickable={hasPlant} \r\n        onClick={handleFlowerClick}\r\n      >\r\n        {hasPlant ? getFlowerStage(growthLevel, flowerType) : null}\r\n      </FlowerDisplay>\r\n      \r\n      {hasPlant && (\r\n        <ProgressContainer>\r\n          <div style={{ marginBottom: '0.5rem', fontSize: '0.8rem', color: '#666' }}>Growth</div>\r\n          <ProgressBar \r\n            now={getProgressPercentage()} \r\n            variant=\"success\"\r\n          />\r\n        </ProgressContainer>\r\n      )}\r\n      \r\n      <FlowerMessage>\r\n        {hasPlant ? getFlowerMessage(growthLevel, flowerType) : \"An empty pot... ready for something special to grow.\"}\r\n      </FlowerMessage>\r\n\r\n      <Button \r\n        variant={hasPlant ? \"outline-danger\" : \"outline-success\"}\r\n        onClick={handlePlantClick}\r\n        size=\"sm\"\r\n      >\r\n        {hasPlant ? 'Plant New Seed' : 'Plant Seed'}\r\n      </Button>\r\n\r\n      <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Replace Current Plant?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to remove the current plant and start fresh?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowConfirm(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={() => {\r\n            dispatch(removePlant());\r\n            dispatch(plantSeed());\r\n            setShowConfirm(false);\r\n          }}>\r\n            Replace Plant\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal show={showPickupWarning} onHide={() => setShowPickupWarning(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Pick Up Flower?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Warning: Once you pick up the flower, you cannot put it back in the pot. You'll need to plant a new seed to grow another flower.\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowPickupWarning(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleConfirmPickup}>\r\n            Pick Up Flower\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </PotContainer>\r\n  );\r\n};\r\n\r\nexport default FlowerPot; ","import * as React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\n/**\n * Finds whether a component's `children` prop includes a React element of the\n * specified type.\n */\nfunction hasChildOfType(children, type) {\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\n}\nexport { map, forEach, hasChildOfType };","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n\n/**\n * Validate that children, if any, are instances of `ProgressBar`.\n */\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n  if (!children) {\n    return null;\n  }\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild = false,\n  ...rest\n}, ref) => {\n  const props = {\n    min: 0,\n    max: 100,\n    animated: false,\n    visuallyHidden: false,\n    striped: false,\n    ...rest\n  };\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;"],"names":["Level161","_jsx","LevelContainer","children","StyledCard","_jsxs","Card","Body","Title","Text","CenteredContainer","LevelButton","targetLevel","ShrineContainer","styled","div","props","isMaxShrine","isComplete","isOverLimit","ShrineSymbol","ProgressText","_ref","requiredCount","maximumCount","overLimitMessage","unlockedAchievements","useSelector","state","achievements","achievementCount","Object","keys","length","hasRequiredAchievements","debugConfig","isDebugMode","debugFeatures","unlockAllShrines","isAccessible","_Fragment","className","PotContainer","FlowerDisplay","clickable","FlowerMessage","ProgressContainer","getFlowerStage","growthLevel","flowerType","stages","flowerTypes","levels","map","Number","sort","a","b","i","getFlowerMessage","messages","FlowerPot","dispatch","useDispatch","hasPlant","flower","equippedItem","inventory","showConfirm","setShowConfirm","useState","showPickupWarning","setShowPickupWarning","pendingPickup","setPendingPickup","onClick","handleFlowerClick","style","marginBottom","fontSize","color","ProgressBar","now","getProgressPercentage","maxLevel","getMaxGrowthLevel","Math","max","min","variant","Button","handlePlantClick","type","plantSeed","size","Modal","show","onHide","Header","closeButton","Footer","removePlant","handleConfirmPickup","currentStage","stage","flowerItem","name","charAt","toUpperCase","slice","weight","weights","equipItem","func","index","React","child","getPercentage","percentage","round","renderProgressBar","ref","label","visuallyHidden","striped","animated","bsPrefix","role","classNames","width","_ref2","isChild","rest","useBootstrapPrefix","wrapperProps","cloneElement","displayName"],"sourceRoot":""}