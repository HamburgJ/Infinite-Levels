{"version":3,"file":"static/js/3563.49825655.chunk.js","mappings":"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","sources":["utils/levelCategories.js","components/UI/VisitedLevelsDisplay.js","components/Levels/Level1001.js","components/UI/AchievementShrine.js","components/UI/FlowerPot.js","../node_modules/react-bootstrap/esm/ElementChildren.js","../node_modules/react-bootstrap/esm/ProgressBar.js"],"sourcesContent":["import { parseStoredLevel } from './complex';\r\n\r\nexport const LEVEL_CATEGORIES = {\r\n  INTEGERS: 'Integers',\r\n  REALS: 'Reals',\r\n  COMPLEX: 'Complex',\r\n  BEYOND: 'Beyond'\r\n};\r\n\r\nexport const getLevelCategory = (levelStr) => {\r\n  if (levelStr === 'Demo' || levelStr.includes('Infinity')) {\r\n    return LEVEL_CATEGORIES.BEYOND;\r\n  }\r\n\r\n  const level = parseStoredLevel(levelStr);\r\n  if (typeof level === 'object' && 'real' in level) {\r\n    if (level.imag === 0) {\r\n      return Number.isInteger(level.real) ? \r\n        LEVEL_CATEGORIES.INTEGERS : \r\n        LEVEL_CATEGORIES.REALS;\r\n    }\r\n    return LEVEL_CATEGORIES.COMPLEX;\r\n  }\r\n\r\n  return LEVEL_CATEGORIES.INTEGERS;\r\n};\r\n\r\nexport const getComplexColor = (levelStr) => {\r\n  const level = parseStoredLevel(levelStr);\r\n  if (typeof level !== 'object' || !('real' in level)) return null;\r\n  \r\n  const angle = Math.atan2(level.imag, level.real);\r\n  const hue = ((angle + Math.PI) / (2 * Math.PI)) * 360;\r\n  return `hsl(${hue}, 70%, 50%)`;\r\n}; ","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { formatLevel, parseStoredLevel } from '../../utils/complex';\r\nimport { LEVEL_CATEGORIES, getLevelCategory, getComplexColor } from '../../utils/levelCategories';\r\n\r\nconst Container = styled.div`\r\n  background: ${props => props.theme === 'dark' ? 'rgba(0, 0, 0, 0.9)' : 'rgba(255, 255, 255, 0.95)'};\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin: 1rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  border: 2px solid ${props => props.theme === 'dark' ? 'rgba(255, 215, 0, 0.3)' : 'rgba(218, 165, 32, 0.3)'};\r\n`;\r\n\r\nconst TabContainer = styled.div`\r\n  display: flex;\r\n  gap: 0.25rem;\r\n  border-bottom: 2px solid ${props => props.theme === 'dark' ? 'rgba(255, 215, 0, 0.3)' : 'rgba(218, 165, 32, 0.3)'};\r\n  padding: 0 1rem;\r\n`;\r\n\r\nconst Tab = styled.button`\r\n  padding: 0.75rem 1.5rem;\r\n  border: 2px solid ${props => props.theme === 'dark' ? 'rgba(255, 215, 0, 0.3)' : 'rgba(218, 165, 32, 0.3)'};\r\n  border-bottom: none;\r\n  border-radius: 8px 8px 0 0;\r\n  background: ${props => props.active ? \r\n    (props.theme === 'dark' ? 'rgba(255, 215, 0, 0.2)' : 'rgba(218, 165, 32, 0.2)') : \r\n    'transparent'};\r\n  color: ${props => props.disabled ? \r\n    (props.theme === 'dark' ? '#666' : '#999') : \r\n    (props.theme === 'dark' ? 'gold' : '#DAA520')};\r\n  cursor: ${props => props.disabled ? 'default' : 'pointer'};\r\n  opacity: ${props => props.disabled ? 0.5 : 1};\r\n  position: relative;\r\n  margin-bottom: -2px;\r\n  z-index: ${props => props.active ? 2 : 1};\r\n\r\n  &:hover {\r\n    background: ${props => !props.disabled && (props.theme === 'dark' ? \r\n      'rgba(255, 215, 0, 0.1)' : \r\n      'rgba(218, 165, 32, 0.1)')};\r\n  }\r\n\r\n  ${props => props.active && `\r\n    background: ${props.theme === 'dark' ? 'rgba(0, 0, 0, 0.9)' : 'rgba(255, 255, 255, 0.95)'};\r\n    border-bottom: 2px solid ${props.theme === 'dark' ? 'rgba(0, 0, 0, 0.9)' : 'rgba(255, 255, 255, 0.95)'};\r\n  `}\r\n`;\r\n\r\nconst ContentContainer = styled.div`\r\n  padding-top: 1.5rem;\r\n`;\r\n\r\nconst LevelGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\r\n  gap: 0.5rem;\r\n  max-height: 300px;\r\n  overflow-y: ${props => props.shouldScroll ? 'auto' : 'hidden'};\r\n  padding-right: 0.5rem;\r\n  padding-top: 0.5rem;\r\n`;\r\n\r\nconst LevelBadge = styled.div`\r\n  background: ${props => props.complexColor || \r\n    (props.theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)')};\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  font-family: monospace;\r\n  transition: all 0.2s ease;\r\n  color: ${props => props.complexColor ? '#fff' : 'inherit'};\r\n`;\r\n\r\nconst CategoryDescription = styled.div`\r\n  color: ${props => props.theme === 'dark' ? '#999' : '#666'};\r\n  font-style: italic;\r\n  text-align: center;\r\n  margin-bottom: 1rem;\r\n  min-height: 2em;\r\n`;\r\n\r\nconst LockedMessage = styled.div`\r\n  color: ${props => props.theme === 'dark' ? '#666' : '#999'};\r\n  text-align: center;\r\n  font-style: italic;\r\n  padding: 2rem;\r\n  height: 200px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n`;\r\n\r\nconst QuestionMark = styled.div`\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n  margin-bottom: 1rem;\r\n  color: ${props => props.theme === 'dark' ? '#444' : '#ccc'};\r\n`;\r\nconst CATEGORY_MESSAGES = {\r\n    INTEGERS: \"Numbers as old as counting itself...\",\r\n    REALS: \"Between every two numbers lies infinity...\",\r\n    COMPLEX: \"Where imagination meets reality...\",\r\n    BEYOND: \"Beyond the boundaries of conventional mathematics...\"\r\n  };\r\n  \r\nconst LOCKED_MESSAGE = \"Explore more distant realms to unlock this dimension...\";\r\nconst VisitedLevelsDisplay = () => {\r\n  const [activeTab, setActiveTab] = useState(LEVEL_CATEGORIES.INTEGERS);\r\n  const theme = useSelector(state => state.theme);\r\n  const visitedLevels = useSelector(state => state.game.visitedLevels);\r\n\r\n  const categorizedLevels = visitedLevels.reduce((acc, level) => {\r\n    const category = getLevelCategory(level);\r\n    if (!acc[category]) acc[category] = [];\r\n    acc[category].push(level);\r\n    return acc;\r\n  }, {});\r\n\r\n  const shouldShowTab = (category) => categorizedLevels[category]?.length > 0;\r\n\r\n  const sortLevels = (a, b) => {\r\n    const levelA = parseStoredLevel(a);\r\n    const levelB = parseStoredLevel(b);\r\n    \r\n    // Handle special cases like 'Demo'\r\n    if (typeof levelA === 'string' || typeof levelB === 'string') {\r\n      return a.localeCompare(b);\r\n    }\r\n    \r\n    // Handle complex numbers\r\n    if (typeof levelA === 'object' && typeof levelB === 'object') {\r\n      // First compare real parts\r\n      if (levelA.real !== levelB.real) {\r\n        return levelA.real - levelB.real;\r\n      }\r\n      // If real parts are equal, compare imaginary parts\r\n      return levelA.imag - levelB.imag;\r\n    }\r\n    \r\n    // Handle simple numbers\r\n    return Number(levelA) - Number(levelB);\r\n  };\r\n\r\n  return (\r\n    <Container theme={theme}>\r\n      <TabContainer>\r\n        {Object.values(LEVEL_CATEGORIES).map(category => (\r\n          <Tab\r\n            key={category}\r\n            active={activeTab === category}\r\n            disabled={!shouldShowTab(category)}\r\n            onClick={() => setActiveTab(category)}\r\n            theme={theme}\r\n          >\r\n            {shouldShowTab(category) ? category : '???'}\r\n          </Tab>\r\n        ))}\r\n      </TabContainer>\r\n      \r\n      {shouldShowTab(activeTab) ? (\r\n        <LevelGrid shouldScroll={categorizedLevels[activeTab]?.length > 12}>\r\n          {(categorizedLevels[activeTab] || []).sort(sortLevels).map(level => (\r\n            <LevelBadge \r\n              key={level} \r\n              theme={theme}\r\n              complexColor={activeTab === LEVEL_CATEGORIES.COMPLEX ? getComplexColor(level) : null}\r\n            >\r\n              {formatLevel(level)}\r\n            </LevelBadge>\r\n          ))}\r\n        </LevelGrid>\r\n      ) : (\r\n        <LockedMessage theme={theme}>\r\n          <QuestionMark theme={theme}>?</QuestionMark>\r\n          {LOCKED_MESSAGE}\r\n        </LockedMessage>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default VisitedLevelsDisplay; ","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel, markMechanicDiscovered } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport FlowerPot from '../UI/FlowerPot';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nimport CollectableCard from '../Items/CollectableCard';\r\nimport ChangeMachineButton from '../UI/ChangeMachineButton';\r\nimport VisitedLevelsDisplay from '../UI/VisitedLevelsDisplay';\r\n\r\nconst Level1001 = () => {\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title>why is this here?</Card.Title>\r\n          <Card.Text>\r\n            why is this here?\r\n          </Card.Text>\r\n          \r\n          <VisitedLevelsDisplay />\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level1001;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from 'react-bootstrap';\r\nimport allAchievements from '../../data/achievements';\r\nimport LevelButton from './LevelButton';\r\nimport debugConfig from '../../config/debug';\r\n\r\nconst ShrineContainer = styled.div`\r\n  width: 100%;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border: 2px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.isMaxShrine && `\r\n    background: rgba(70, 0, 70, 0.1);\r\n    border: 2px solid purple;\r\n  `}\r\n  \r\n  ${props => props.isComplete && !props.isMaxShrine && `\r\n    background: rgba(255, 215, 0, 0.1);\r\n    border-color: gold;\r\n  `}\r\n\r\n  ${props => props.isOverLimit && `\r\n    background: rgba(255, 0, 0, 0.1);\r\n    border-color: red;\r\n  `}\r\n`;\r\n\r\nconst ShrineSymbol = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  color: ${props => {\r\n    if (props.isMaxShrine) return 'purple';\r\n    if (props.isOverLimit) return '#ff0000';\r\n    if (props.isComplete) return 'gold';\r\n    return '#666';\r\n  }};\r\n`;\r\n\r\nconst ProgressText = styled.div`\r\n  color: ${props => props.isOverLimit ? 'red' : 'inherit'};\r\n  font-weight: ${props => props.isOverLimit ? 'bold' : 'normal'};\r\n`;\r\n\r\nconst AchievementShrine = ({ \r\n  requiredCount = null,\r\n  maximumCount = null,\r\n  children,\r\n  overLimitMessage = \"Too many achievements! You must prestige to access this content.\"\r\n}) => {\r\n  const unlockedAchievements = useSelector(state => state.achievements.achievements);\r\n  const achievementCount = Object.keys(unlockedAchievements).length;\r\n  \r\n  const isMaxShrine = maximumCount !== null;\r\n  const isOverLimit = isMaxShrine && achievementCount > maximumCount;\r\n  const hasRequiredAchievements = !isMaxShrine && (\r\n    debugConfig.isDebugMode && debugConfig.debugFeatures.unlockAllShrines ? \r\n    true : achievementCount >= requiredCount\r\n  );\r\n  \r\n  const isAccessible = isMaxShrine ? !isOverLimit : hasRequiredAchievements;\r\n\r\n  return (\r\n    <ShrineContainer>\r\n      <StyledCard isComplete={isAccessible} isOverLimit={isOverLimit} isMaxShrine={isMaxShrine}>\r\n        <Card.Body>\r\n          <ShrineSymbol \r\n            isComplete={isAccessible} \r\n            isOverLimit={isOverLimit}\r\n            isMaxShrine={isMaxShrine}\r\n          >\r\n            {isMaxShrine ? '🔮' : (isAccessible ? '🔓' : '🔒')}\r\n          </ShrineSymbol>\r\n          \r\n          <Card.Title>\r\n            {isMaxShrine ? 'Prestige Shrine' : 'Achievement Shrine'}\r\n          </Card.Title>\r\n          \r\n          <ProgressText isOverLimit={isOverLimit}>\r\n            {isMaxShrine ? (\r\n              <>Current: {achievementCount} / Maximum: {maximumCount}</>\r\n            ) : (\r\n              <>Progress: {achievementCount} / {requiredCount}</>\r\n            )}\r\n          </ProgressText>\r\n          \r\n          {isMaxShrine ? (\r\n            isOverLimit ? (\r\n              <Card.Text className=\"text-danger\">\r\n                {overLimitMessage}\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          ) : (\r\n            !hasRequiredAchievements ? (\r\n              <Card.Text>\r\n                Return when you have unlocked at least {requiredCount} achievements...\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </ShrineContainer>\r\n  );\r\n};\r\n\r\nexport default AchievementShrine;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { plantSeed, removePlant } from '../../store/slices/flowerSlice';\r\nimport { Card, Button, Modal, ProgressBar } from 'react-bootstrap';\r\nimport flowerTypes from '../../data/flowerTypes';\r\nimport { equipItem } from '../../store/slices/inventorySlice';\r\n\r\nconst PotContainer = styled.div`\r\n  text-align: center;\r\n  margin: 2rem 0;\r\n  padding: 1rem;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst FlowerDisplay = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  transition: all 0.3s ease;\r\n  cursor: ${props => props.clickable ? 'pointer' : 'default'};\r\n  \r\n  &:hover {\r\n    transform: ${props => props.clickable ? 'scale(1.1)' : 'none'};\r\n  }\r\n`;\r\n\r\nconst FlowerMessage = styled.div`\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n  margin: 1rem 0;\r\n  font-style: italic;\r\n`;\r\n\r\nconst ProgressContainer = styled.div`\r\n  margin: 1rem 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst getFlowerStage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return null;\r\n  const stages = flowerTypes[flowerType].stages;\r\n  const levels = Object.keys(stages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return stages[levels[i]];\r\n    }\r\n  }\r\n  return stages[0];\r\n};\r\n\r\nconst getFlowerMessage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return \"An empty pot... ready for something special to grow.\";\r\n  \r\n  const messages = flowerTypes[flowerType].messages;\r\n  const levels = Object.keys(messages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return messages[levels[i]];\r\n    }\r\n  }\r\n  return messages[0];\r\n};\r\n\r\nconst getNextStageLevel = (currentLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const stages = Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .sort((a, b) => a - b);\r\n  \r\n  for (const level of stages) {\r\n    if (level > currentLevel) {\r\n      return level;\r\n    }\r\n  }\r\n  return stages[stages.length - 1];\r\n};\r\n\r\nconst getProgressPercentage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const currentLevel = growthLevel;\r\n  const nextLevel = getNextStageLevel(currentLevel, flowerType);\r\n  const prevLevel = Math.max(0, ...Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .filter(level => level <= currentLevel));\r\n  \r\n  const progress = currentLevel - prevLevel;\r\n  const total = nextLevel - prevLevel;\r\n  return Math.min((progress / total) * 100, 100);\r\n};\r\n\r\nconst FlowerPot = () => {\r\n  const dispatch = useDispatch();\r\n  const { hasPlant, growthLevel, flowerType } = useSelector(state => state.flower);\r\n  const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [showPickupWarning, setShowPickupWarning] = useState(false);\r\n  const [pendingPickup, setPendingPickup] = useState(false);\r\n\r\n  const getMaxGrowthLevel = () => {\r\n    if (!flowerType) return 0;\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number);\r\n    return Math.max(...stages);\r\n  };\r\n\r\n  const getProgressPercentage = () => {\r\n    const maxLevel = getMaxGrowthLevel();\r\n    return Math.min((growthLevel / maxLevel) * 100, 100);\r\n  };\r\n\r\n  const handlePlantClick = () => {\r\n    if (hasPlant) {\r\n      setShowConfirm(true);\r\n    } else if (equippedItem?.type === 'flower') {\r\n      dispatch(plantSeed());\r\n    } else {\r\n      dispatch(plantSeed());\r\n    }\r\n  };\r\n\r\n  const handleFlowerClick = () => {\r\n    if (!hasPlant) return;\r\n    setShowPickupWarning(true);\r\n  };\r\n\r\n  const handleConfirmPickup = () => {\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number).sort((a, b) => a - b);\r\n    let currentStage = 0;\r\n    for (let stage of stages) {\r\n      if (growthLevel >= stage) {\r\n        currentStage = stage;\r\n      }\r\n    }\r\n    \r\n    const flowerItem = {\r\n      type: 'flower',\r\n      flowerType,\r\n      growthLevel,\r\n      stage: getFlowerStage(growthLevel, flowerType),\r\n      name: `${flowerType.charAt(0).toUpperCase() + flowerType.slice(1)} (Growth: ${growthLevel})`,\r\n      weight: flowerTypes[flowerType].weights[currentStage]\r\n    };\r\n    \r\n    dispatch(equipItem(flowerItem));\r\n    dispatch(removePlant());\r\n    setShowPickupWarning(false);\r\n  };\r\n\r\n  return (\r\n    <PotContainer>\r\n      <FlowerDisplay \r\n        clickable={hasPlant} \r\n        onClick={handleFlowerClick}\r\n      >\r\n        {hasPlant ? getFlowerStage(growthLevel, flowerType) : null}\r\n      </FlowerDisplay>\r\n      \r\n      {hasPlant && (\r\n        <ProgressContainer>\r\n          <div style={{ marginBottom: '0.5rem', fontSize: '0.8rem', color: '#666' }}>Growth</div>\r\n          <ProgressBar \r\n            now={getProgressPercentage()} \r\n            variant=\"success\"\r\n          />\r\n        </ProgressContainer>\r\n      )}\r\n      \r\n      <FlowerMessage>\r\n        {hasPlant ? getFlowerMessage(growthLevel, flowerType) : \"An empty pot... ready for something special to grow.\"}\r\n      </FlowerMessage>\r\n\r\n      <Button \r\n        variant={hasPlant ? \"outline-danger\" : \"outline-success\"}\r\n        onClick={handlePlantClick}\r\n        size=\"sm\"\r\n      >\r\n        {hasPlant ? 'Plant New Seed' : 'Plant Seed'}\r\n      </Button>\r\n\r\n      <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Replace Current Plant?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to remove the current plant and start fresh?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowConfirm(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={() => {\r\n            dispatch(removePlant());\r\n            dispatch(plantSeed());\r\n            setShowConfirm(false);\r\n          }}>\r\n            Replace Plant\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal show={showPickupWarning} onHide={() => setShowPickupWarning(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Pick Up Flower?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Warning: Once you pick up the flower, you cannot put it back in the pot. You'll need to plant a new seed to grow another flower.\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowPickupWarning(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleConfirmPickup}>\r\n            Pick Up Flower\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </PotContainer>\r\n  );\r\n};\r\n\r\nexport default FlowerPot; ","import * as React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\n/**\n * Finds whether a component's `children` prop includes a React element of the\n * specified type.\n */\nfunction hasChildOfType(children, type) {\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\n}\nexport { map, forEach, hasChildOfType };","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n\n/**\n * Validate that children, if any, are instances of `ProgressBar`.\n */\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n  if (!children) {\n    return null;\n  }\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild = false,\n  ...rest\n}, ref) => {\n  const props = {\n    min: 0,\n    max: 100,\n    animated: false,\n    visuallyHidden: false,\n    striped: false,\n    ...rest\n  };\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;"],"names":["LEVEL_CATEGORIES","INTEGERS","REALS","COMPLEX","BEYOND","getComplexColor","levelStr","level","parseStoredLevel","Math","atan2","imag","real","PI","Container","styled","div","props","theme","TabContainer","Tab","button","active","disabled","LevelGrid","shouldScroll","LevelBadge","complexColor","LockedMessage","QuestionMark","VisitedLevelsDisplay","_categorizedLevels$ac","activeTab","setActiveTab","useState","useSelector","state","categorizedLevels","game","visitedLevels","reduce","acc","category","includes","Number","isInteger","getLevelCategory","push","shouldShowTab","_categorizedLevels$ca","length","_jsxs","children","_jsx","Object","values","map","onClick","sort","sortLevels","a","b","levelA","levelB","localeCompare","formatLevel","Level1001","LevelContainer","StyledCard","Card","Body","Title","Text","ShrineContainer","isMaxShrine","isComplete","isOverLimit","ShrineSymbol","ProgressText","_ref","requiredCount","maximumCount","overLimitMessage","unlockedAchievements","achievements","achievementCount","keys","hasRequiredAchievements","debugConfig","isDebugMode","debugFeatures","unlockAllShrines","isAccessible","_Fragment","className","PotContainer","FlowerDisplay","clickable","FlowerMessage","ProgressContainer","getFlowerStage","growthLevel","flowerType","stages","flowerTypes","levels","i","getFlowerMessage","messages","FlowerPot","dispatch","useDispatch","hasPlant","flower","equippedItem","inventory","showConfirm","setShowConfirm","showPickupWarning","setShowPickupWarning","pendingPickup","setPendingPickup","handleFlowerClick","style","marginBottom","fontSize","color","ProgressBar","now","getProgressPercentage","maxLevel","getMaxGrowthLevel","max","min","variant","Button","handlePlantClick","type","plantSeed","size","Modal","show","onHide","Header","closeButton","Footer","removePlant","handleConfirmPickup","currentStage","stage","flowerItem","name","charAt","toUpperCase","slice","weight","weights","equipItem","func","index","React","child","getPercentage","percentage","round","renderProgressBar","ref","label","visuallyHidden","striped","animated","bsPrefix","role","classNames","width","_ref2","isChild","rest","useBootstrapPrefix","wrapperProps","cloneElement","displayName"],"sourceRoot":""}