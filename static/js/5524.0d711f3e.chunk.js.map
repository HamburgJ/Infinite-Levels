{"version":3,"file":"static/js/5524.0d711f3e.chunk.js","mappings":"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","sources":["components/Levels/Level10000.js","components/UI/AchievementShrine.js","components/UI/FlowerPot.js"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel, markMechanicDiscovered } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport FlowerPot from '../UI/FlowerPot';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nimport CollectableCard from '../Items/CollectableCard';\r\nimport ChangeMachineButton from '../UI/ChangeMachineButton';\r\nimport HighlightableText from '../UI/HighlightableText';\r\n\r\nconst Level10 = () => {\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title>\r\n            <HighlightableText text=\"10k? Are you cheating?\" size=\"medium\"/>\r\n          </Card.Title>\r\n          <Card.Text>\r\n            <HighlightableText text=\"Getting to level 10k is no small feat... your IQ must be close to 10k!\" size=\"small\"/>\r\n            <HighlightableText text=\"From here on out, the levels will not be as easy as the first ten thousand!\" size=\"small\"/>\r\n          </Card.Text>\r\n      \r\n          <AchievementShrine requiredCount={30}>\r\n            <CenteredContainer>\r\n              <CollectableCard cardId={1} value={3} suit=\"hearts\"/>\r\n            </CenteredContainer>\r\n          </AchievementShrine>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level10;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from 'react-bootstrap';\r\nimport allAchievements from '../../data/achievements';\r\nimport LevelButton from './LevelButton';\r\nimport debugConfig from '../../config/debug';\r\n\r\nconst ShrineContainer = styled.div`\r\n  width: 100%;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border: 2px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.isMaxShrine && `\r\n    background: rgba(70, 0, 70, 0.1);\r\n    border: 2px solid purple;\r\n  `}\r\n  \r\n  ${props => props.isComplete && !props.isMaxShrine && `\r\n    background: rgba(255, 215, 0, 0.1);\r\n    border-color: gold;\r\n  `}\r\n\r\n  ${props => props.isOverLimit && `\r\n    background: rgba(255, 0, 0, 0.1);\r\n    border-color: red;\r\n  `}\r\n`;\r\n\r\nconst ShrineSymbol = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  color: ${props => {\r\n    if (props.isMaxShrine) return 'purple';\r\n    if (props.isOverLimit) return '#ff0000';\r\n    if (props.isComplete) return 'gold';\r\n    return '#666';\r\n  }};\r\n`;\r\n\r\nconst ProgressText = styled.div`\r\n  color: ${props => props.isOverLimit ? 'red' : 'inherit'};\r\n  font-weight: ${props => props.isOverLimit ? 'bold' : 'normal'};\r\n`;\r\n\r\nconst AchievementShrine = ({ \r\n  requiredCount = null,\r\n  maximumCount = null,\r\n  children,\r\n  overLimitMessage = \"Too many achievements! You must prestige to access this content.\"\r\n}) => {\r\n  const unlockedAchievements = useSelector(state => state.achievements.achievements);\r\n  const achievementCount = Object.keys(unlockedAchievements).length;\r\n  \r\n  const isMaxShrine = maximumCount !== null;\r\n  const isOverLimit = isMaxShrine && achievementCount > maximumCount;\r\n  const hasRequiredAchievements = !isMaxShrine && (\r\n    debugConfig.isDebugMode && debugConfig.debugFeatures.unlockAllShrines ? \r\n    true : achievementCount >= requiredCount\r\n  );\r\n  \r\n  const isAccessible = isMaxShrine ? !isOverLimit : hasRequiredAchievements;\r\n\r\n  return (\r\n    <ShrineContainer>\r\n      <StyledCard isComplete={isAccessible} isOverLimit={isOverLimit} isMaxShrine={isMaxShrine}>\r\n        <Card.Body>\r\n          <ShrineSymbol \r\n            isComplete={isAccessible} \r\n            isOverLimit={isOverLimit}\r\n            isMaxShrine={isMaxShrine}\r\n          >\r\n            {isMaxShrine ? '🔮' : (isAccessible ? '🔓' : '🔒')}\r\n          </ShrineSymbol>\r\n          \r\n          <Card.Title>\r\n            {isMaxShrine ? 'Prestige Shrine' : 'Achievement Shrine'}\r\n          </Card.Title>\r\n          \r\n          <ProgressText isOverLimit={isOverLimit}>\r\n            {isMaxShrine ? (\r\n              <>Current: {achievementCount} / Maximum: {maximumCount}</>\r\n            ) : (\r\n              <>Progress: {achievementCount} / {requiredCount}</>\r\n            )}\r\n          </ProgressText>\r\n          \r\n          {isMaxShrine ? (\r\n            isOverLimit ? (\r\n              <Card.Text className=\"text-danger\">\r\n                {overLimitMessage}\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          ) : (\r\n            !hasRequiredAchievements ? (\r\n              <Card.Text>\r\n                Return when you have unlocked at least {requiredCount} achievements...\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </ShrineContainer>\r\n  );\r\n};\r\n\r\nexport default AchievementShrine;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { plantSeed, removePlant } from '../../store/slices/flowerSlice';\r\nimport { Card, Button, Modal, ProgressBar } from 'react-bootstrap';\r\nimport flowerTypes from '../../data/flowerTypes';\r\nimport { equipItem } from '../../store/slices/inventorySlice';\r\n\r\nconst PotContainer = styled.div`\r\n  text-align: center;\r\n  margin: 2rem 0;\r\n  padding: 1rem;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst FlowerDisplay = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  transition: all 0.3s ease;\r\n  cursor: ${props => props.clickable ? 'pointer' : 'default'};\r\n  \r\n  &:hover {\r\n    transform: ${props => props.clickable ? 'scale(1.1)' : 'none'};\r\n  }\r\n`;\r\n\r\nconst FlowerMessage = styled.div`\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n  margin: 1rem 0;\r\n  font-style: italic;\r\n`;\r\n\r\nconst ProgressContainer = styled.div`\r\n  margin: 1rem 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst getFlowerStage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return null;\r\n  const stages = flowerTypes[flowerType].stages;\r\n  const levels = Object.keys(stages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return stages[levels[i]];\r\n    }\r\n  }\r\n  return stages[0];\r\n};\r\n\r\nconst getFlowerMessage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return \"An empty pot... ready for something special to grow.\";\r\n  \r\n  const messages = flowerTypes[flowerType].messages;\r\n  const levels = Object.keys(messages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return messages[levels[i]];\r\n    }\r\n  }\r\n  return messages[0];\r\n};\r\n\r\nconst getNextStageLevel = (currentLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const stages = Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .sort((a, b) => a - b);\r\n  \r\n  for (const level of stages) {\r\n    if (level > currentLevel) {\r\n      return level;\r\n    }\r\n  }\r\n  return stages[stages.length - 1];\r\n};\r\n\r\nconst getProgressPercentage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const currentLevel = growthLevel;\r\n  const nextLevel = getNextStageLevel(currentLevel, flowerType);\r\n  const prevLevel = Math.max(0, ...Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .filter(level => level <= currentLevel));\r\n  \r\n  const progress = currentLevel - prevLevel;\r\n  const total = nextLevel - prevLevel;\r\n  return Math.min((progress / total) * 100, 100);\r\n};\r\n\r\nconst FlowerPot = () => {\r\n  const dispatch = useDispatch();\r\n  const { hasPlant, growthLevel, flowerType } = useSelector(state => state.flower);\r\n  const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [showPickupWarning, setShowPickupWarning] = useState(false);\r\n  const [pendingPickup, setPendingPickup] = useState(false);\r\n\r\n  const getMaxGrowthLevel = () => {\r\n    if (!flowerType) return 0;\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number);\r\n    return Math.max(...stages);\r\n  };\r\n\r\n  const getProgressPercentage = () => {\r\n    const maxLevel = getMaxGrowthLevel();\r\n    return Math.min((growthLevel / maxLevel) * 100, 100);\r\n  };\r\n\r\n  const handlePlantClick = () => {\r\n    if (hasPlant) {\r\n      setShowConfirm(true);\r\n    } else if (equippedItem?.type === 'flower') {\r\n      dispatch(plantSeed());\r\n    } else {\r\n      dispatch(plantSeed());\r\n    }\r\n  };\r\n\r\n  const handleFlowerClick = () => {\r\n    if (!hasPlant) return;\r\n    setShowPickupWarning(true);\r\n  };\r\n\r\n  const handleConfirmPickup = () => {\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number).sort((a, b) => a - b);\r\n    let currentStage = 0;\r\n    for (let stage of stages) {\r\n      if (growthLevel >= stage) {\r\n        currentStage = stage;\r\n      }\r\n    }\r\n    \r\n    const flowerItem = {\r\n      type: 'flower',\r\n      flowerType,\r\n      growthLevel,\r\n      stage: getFlowerStage(growthLevel, flowerType),\r\n      name: `${flowerType.charAt(0).toUpperCase() + flowerType.slice(1)} (Growth: ${growthLevel})`,\r\n      weight: flowerTypes[flowerType].weights[currentStage]\r\n    };\r\n    \r\n    dispatch(equipItem(flowerItem));\r\n    dispatch(removePlant());\r\n    setShowPickupWarning(false);\r\n  };\r\n\r\n  return (\r\n    <PotContainer>\r\n      <FlowerDisplay \r\n        clickable={hasPlant} \r\n        onClick={handleFlowerClick}\r\n      >\r\n        {hasPlant ? getFlowerStage(growthLevel, flowerType) : null}\r\n      </FlowerDisplay>\r\n      \r\n      {hasPlant && (\r\n        <ProgressContainer>\r\n          <div style={{ marginBottom: '0.5rem', fontSize: '0.8rem', color: '#666' }}>Growth</div>\r\n          <ProgressBar \r\n            now={getProgressPercentage()} \r\n            variant=\"success\"\r\n          />\r\n        </ProgressContainer>\r\n      )}\r\n      \r\n      <FlowerMessage>\r\n        {hasPlant ? getFlowerMessage(growthLevel, flowerType) : \"An empty pot... ready for something special to grow.\"}\r\n      </FlowerMessage>\r\n\r\n      <Button \r\n        variant={hasPlant ? \"outline-danger\" : \"outline-success\"}\r\n        onClick={handlePlantClick}\r\n        size=\"sm\"\r\n      >\r\n        {hasPlant ? 'Plant New Seed' : 'Plant Seed'}\r\n      </Button>\r\n\r\n      <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Replace Current Plant?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to remove the current plant and start fresh?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowConfirm(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={() => {\r\n            dispatch(removePlant());\r\n            dispatch(plantSeed());\r\n            setShowConfirm(false);\r\n          }}>\r\n            Replace Plant\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal show={showPickupWarning} onHide={() => setShowPickupWarning(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Pick Up Flower?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Warning: Once you pick up the flower, you cannot put it back in the pot. You'll need to plant a new seed to grow another flower.\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowPickupWarning(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleConfirmPickup}>\r\n            Pick Up Flower\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </PotContainer>\r\n  );\r\n};\r\n\r\nexport default FlowerPot; "],"names":["Level10","_jsx","LevelContainer","children","StyledCard","_jsxs","Card","Body","Title","HighlightableText","text","size","Text","AchievementShrine","requiredCount","CenteredContainer","CollectableCard","cardId","value","suit","ShrineContainer","styled","div","props","isMaxShrine","isComplete","isOverLimit","ShrineSymbol","ProgressText","_ref","maximumCount","overLimitMessage","unlockedAchievements","useSelector","state","achievements","achievementCount","Object","keys","length","hasRequiredAchievements","debugConfig","isDebugMode","debugFeatures","unlockAllShrines","isAccessible","_Fragment","className","PotContainer","FlowerDisplay","clickable","FlowerMessage","ProgressContainer","getFlowerStage","growthLevel","flowerType","stages","flowerTypes","levels","map","Number","sort","a","b","i","getFlowerMessage","messages","FlowerPot","dispatch","useDispatch","hasPlant","flower","equippedItem","inventory","showConfirm","setShowConfirm","useState","showPickupWarning","setShowPickupWarning","pendingPickup","setPendingPickup","onClick","handleFlowerClick","style","marginBottom","fontSize","color","ProgressBar","now","getProgressPercentage","maxLevel","getMaxGrowthLevel","Math","max","min","variant","Button","handlePlantClick","type","plantSeed","Modal","show","onHide","Header","closeButton","Footer","removePlant","handleConfirmPickup","currentStage","stage","flowerItem","name","charAt","toUpperCase","slice","weight","weights","equipItem"],"sourceRoot":""}