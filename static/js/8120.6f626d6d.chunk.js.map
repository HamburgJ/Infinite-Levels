{"version":3,"file":"static/js/8120.6f626d6d.chunk.js","mappings":"yNAOA,MAAMA,EAAgBC,EAAAA,GAAOC,GAAG;;;;;;;;EAU1BC,EAAWF,EAAAA,GAAOC,GAAG;gBACXE,GAASA,EAAMC,MAAQ,UAAY;;;;;;;;;;iBAUlCD,IAAUA,EAAMC,OAAS;kBACxBD,IAAUA,EAAMC,OAAS;;EAIrCC,EAAeL,EAAAA,GAAOC,GAAG;;;;;EA6I/B,EAtIgBK,KACd,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAASC,MAAM,IAAIC,KAAK,QACzCC,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,IAC5BK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAEvCO,EAAAA,EAAAA,YAAU,KAERC,IACAA,GAAiB,GAChB,IAEH,MAAMA,EAAkBA,KACtBT,GAAQU,IACN,MAAMC,EAAU,IAAID,GACdE,EAAeD,EAAQE,KAAI,CAACC,EAAMC,IAAmB,OAATD,EAAgBC,EAAQ,OAAMC,QAAOC,GAAe,OAARA,IAE9F,GAAIL,EAAaM,OAAS,EAAG,CAE3BP,EADoBC,EAAaO,KAAKC,MAAMD,KAAKE,SAAWT,EAAaM,UAClD,CACzB,CAEA,OAAOP,CAAO,GACd,EAsDJ,OACEW,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAC,UACbF,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CAAAD,UACTE,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,KAAI,CAAAJ,SAAA,EACRF,EAAAA,EAAAA,KAACO,EAAAA,GAAiB,CAAAL,UAChBF,EAAAA,EAAAA,KAACK,EAAAA,EAAKG,MAAK,CAAAN,UACTF,EAAAA,EAAAA,KAACS,EAAAA,EAAiB,CAACC,KAAK,yBAAyBC,KAAK,gBAI1DX,EAAAA,EAAAA,KAACO,EAAAA,GAAiB,CAAAL,UAChBF,EAAAA,EAAAA,KAACK,EAAAA,EAAKO,KAAI,CAAAV,UACRF,EAAAA,EAAAA,KAACS,EAAAA,EAAiB,CAACC,KACjB1B,EACI,kEACA,iFAKVoB,EAAAA,EAAAA,MAAC7B,EAAY,CAAA2B,SAAA,CAAC,UAAQpB,MAEtBkB,EAAAA,EAAAA,KAAC/B,EAAa,CAAAiC,SACXzB,EAAKc,KAAI,CAACjB,EAAOmB,KAChBO,EAAAA,EAAAA,KAAC5B,EAAQ,CAEPE,MAAOA,EACPuC,QAASA,IA9EEpB,KACnBT,GAEJN,GAAQU,IACN,MAAMC,EAAU,IAAID,GACpB,IAAKC,EAAQI,GAAQ,CACnBJ,EAAQI,GAAS,EACjBV,GAAS+B,GAAQA,EAAO,IAGxB,MAAMC,EAAMlB,KAAKC,MAAML,EAAQ,GACzBuB,EAAMvB,EAAQ,EACdwB,EAAkB,CACtBF,EAAM,EAAItB,EAAQ,EAAI,KACtBsB,EAAM,EAAItB,EAAQ,EAAI,KACtBuB,EAAM,EAAIvB,EAAQ,EAAI,KACtBuB,EAAM,EAAIvB,EAAQ,EAAI,MACtBC,QAAOC,GAAe,OAARA,IAEhB,IAAIuB,GAAS,EACbD,EAAgBE,SAAQC,IAClB/B,EAAQ+B,KAAc/B,EAAQI,KAChCJ,EAAQ+B,GAA6B,EAAjB/B,EAAQI,GAC5BJ,EAAQI,GAAS,KACjBV,GAAS+B,GAAQA,EAAOzB,EAAQ+B,KAChCF,GAAS,EAEiB,KAAtB7B,EAAQ+B,IACVnC,GAAW,GAEf,IAGGiC,GACH/B,GAEJ,CACA,OAAOE,CAAO,GACd,EAwCyBgC,CAAgB5B,GAAOS,SAErC5B,GAAS,IAJLmB,QASXW,EAAAA,EAAAA,MAACG,EAAAA,GAAiB,CAAAL,SAAA,EAChBF,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CACLC,QAAQ,kBACRV,QA/CMW,KAChB9C,EAAQE,MAAM,IAAIC,KAAK,OACvBE,EAAS,GACTE,GAAW,GACXwC,YAAW,KACTtC,IACAA,GAAiB,GAChB,IAAI,EAyCGuC,UAAU,MAAKxB,SAChB,eAIAlB,IACCgB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAW,CACVJ,QAAQ,kBACRK,QAAM,EAAA1B,SACP,wBAOM,C","sources":["components/Levels/Level16.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport HighlightableText from '../UI/HighlightableText';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport styled from 'styled-components';\r\n\r\nconst GridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  gap: 8px;\r\n  padding: 16px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst GridCell = styled.div`\r\n  background: ${props => props.value ? '#d4af37' : '#ffffff'};\r\n  border: 2px solid #d4af37;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  \r\n  &:hover {\r\n    transform: ${props => !props.value && 'scale(1.05)'};\r\n    box-shadow: ${props => !props.value && '0 0 10px rgba(212, 175, 55, 0.5)'};\r\n  }\r\n`;\r\n\r\nconst ScoreDisplay = styled.div`\r\n  font-size: 1.2rem;\r\n  color: #d4af37;\r\n  text-align: center;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst Level16 = () => {\r\n  const [grid, setGrid] = useState(Array(16).fill(null));\r\n  const [score, setScore] = useState(0);\r\n  const [gameWon, setGameWon] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize grid with two random cells\r\n    addRandomNumber();\r\n    addRandomNumber();\r\n  }, []);\r\n\r\n  const addRandomNumber = () => {\r\n    setGrid(prevGrid => {\r\n      const newGrid = [...prevGrid];\r\n      const emptyIndices = newGrid.map((cell, index) => cell === null ? index : null).filter(idx => idx !== null);\r\n      \r\n      if (emptyIndices.length > 0) {\r\n        const randomIndex = emptyIndices[Math.floor(Math.random() * emptyIndices.length)];\r\n        newGrid[randomIndex] = 2;\r\n      }\r\n      \r\n      return newGrid;\r\n    });\r\n  };\r\n\r\n  const handleCellClick = (index) => {\r\n    if (gameWon) return;\r\n    \r\n    setGrid(prevGrid => {\r\n      const newGrid = [...prevGrid];\r\n      if (!newGrid[index]) {\r\n        newGrid[index] = 2;\r\n        setScore(prev => prev + 2);\r\n        \r\n        // Check for matching adjacent cells\r\n        const row = Math.floor(index / 4);\r\n        const col = index % 4;\r\n        const adjacentIndices = [\r\n          row > 0 ? index - 4 : null,           // up\r\n          row < 3 ? index + 4 : null,           // down\r\n          col > 0 ? index - 1 : null,           // left\r\n          col < 3 ? index + 1 : null            // right\r\n        ].filter(idx => idx !== null);\r\n\r\n        let merged = false;\r\n        adjacentIndices.forEach(adjIndex => {\r\n          if (newGrid[adjIndex] === newGrid[index]) {\r\n            newGrid[adjIndex] = newGrid[index] * 2;\r\n            newGrid[index] = null;\r\n            setScore(prev => prev + newGrid[adjIndex]);\r\n            merged = true;\r\n            \r\n            if (newGrid[adjIndex] === 16) {\r\n              setGameWon(true);\r\n            }\r\n          }\r\n        });\r\n\r\n        if (!merged) {\r\n          addRandomNumber();\r\n        }\r\n      }\r\n      return newGrid;\r\n    });\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setGrid(Array(16).fill(null));\r\n    setScore(0);\r\n    setGameWon(false);\r\n    setTimeout(() => {\r\n      addRandomNumber();\r\n      addRandomNumber();\r\n    }, 100);\r\n  };\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <CenteredContainer>\r\n            <Card.Title>\r\n              <HighlightableText text=\"Level 16 - Powers of 2\" size=\"medium\"/>\r\n            </Card.Title>\r\n          </CenteredContainer>\r\n\r\n          <CenteredContainer>\r\n            <Card.Text>\r\n              <HighlightableText text={\r\n                gameWon \r\n                  ? \"ðŸŽ‰ Congratulations! You've mastered the power of 2^4!\" \r\n                  : \"Click empty cells to place 2's. Match adjacent numbers to combine them!\"\r\n              }/>\r\n            </Card.Text>\r\n          </CenteredContainer>\r\n\r\n          <ScoreDisplay>Score: {score}</ScoreDisplay>\r\n\r\n          <GridContainer>\r\n            {grid.map((value, index) => (\r\n              <GridCell \r\n                key={index} \r\n                value={value}\r\n                onClick={() => handleCellClick(index)}\r\n              >\r\n                {value || ''}\r\n              </GridCell>\r\n            ))}\r\n          </GridContainer>\r\n\r\n          <CenteredContainer>\r\n            <Button \r\n              variant=\"outline-primary\" \r\n              onClick={resetGame}\r\n              className=\"m-2\"\r\n            >\r\n              Reset Grid\r\n            </Button>\r\n\r\n            {gameWon && (\r\n              <LevelButton\r\n                variant=\"outline-success\"\r\n                target\r\n              >\r\n                Next Level\r\n              </LevelButton>\r\n            )}\r\n          </CenteredContainer>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level16;"],"names":["GridContainer","styled","div","GridCell","props","value","ScoreDisplay","Level16","grid","setGrid","useState","Array","fill","score","setScore","gameWon","setGameWon","useEffect","addRandomNumber","prevGrid","newGrid","emptyIndices","map","cell","index","filter","idx","length","Math","floor","random","_jsx","LevelContainer","children","StyledCard","_jsxs","Card","Body","CenteredContainer","Title","HighlightableText","text","size","Text","onClick","prev","row","col","adjacentIndices","merged","forEach","adjIndex","handleCellClick","Button","variant","resetGame","setTimeout","className","LevelButton","target"],"sourceRoot":""}