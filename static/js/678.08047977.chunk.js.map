{"version":3,"file":"static/js/678.08047977.chunk.js","mappings":"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","sources":["components/Items/BaseCollectable.js","components/Items/CollectableCard.js","components/Levels/Level10000000.js","utils/itemLocation.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { equipItem, swapEquippedItem, addCardToBox } from '../../store/slices/inventorySlice';\r\nimport ConfirmationModal from '../UI/ConfirmationModal';\r\nimport { isItemAvailable } from '../../utils/itemLocation';\r\n\r\nconst BaseCollectable = ({ \r\n  itemConfig,\r\n  onBeforeCollect,\r\n  children,\r\n  renderItem \r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  const collected = !useSelector(state => isItemAvailable(state, itemConfig.id));\r\n  const [showSwapModal, setShowSwapModal] = useState(false);\r\n\r\n  const handleCollect = () => {\r\n    if (collected) return;\r\n\r\n    if (onBeforeCollect) {\r\n      const shouldContinue = onBeforeCollect(equippedItem);\r\n      if (!shouldContinue) return;\r\n    }\r\n\r\n    if (itemConfig.type === 'card' && equippedItem?.type === 'card-box') {\r\n      dispatch(addCardToBox({ cardId: itemConfig.id }));\r\n      return;\r\n    }\r\n\r\n    if (equippedItem) {\r\n      setShowSwapModal(true);\r\n    } else {\r\n      dispatch(equipItem(itemConfig));\r\n    }\r\n  };\r\n\r\n  const handleConfirmSwap = () => {\r\n    if (equippedItem?.type === 'card' && itemConfig.type === 'card-box') {\r\n      const boxWithCard = {\r\n        ...itemConfig,\r\n        collectedCards: { [equippedItem.id]: true }\r\n      };\r\n      dispatch(equipItem(boxWithCard));\r\n    } else {\r\n      dispatch(swapEquippedItem({\r\n        newItem: itemConfig\r\n      }));\r\n    }\r\n    setShowSwapModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {renderItem({ collected, handleCollect })}\r\n\r\n      <ConfirmationModal\r\n        show={showSwapModal}\r\n        onConfirm={handleConfirmSwap}\r\n        onCancel={() => setShowSwapModal(false)}\r\n        itemName={equippedItem?.name || 'current item'}\r\n        message={`Picking up the ${itemConfig.name} will return your ${equippedItem?.name || 'current item'} to its original location. Continue?`}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BaseCollectable; ","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addCardToBox, equipCard } from '../../store/slices/inventorySlice';\r\nimport BaseCollectable from './BaseCollectable';\r\nimport { DarkHolographicCard, HolographicCard, NormalCard, GoldStarCard } from './SpecialCards';\r\nimport CARDS from '../../data/cards';\r\nimport { getCardComponent } from './SpecialCards';\r\n\r\nconst wobbleFloat = keyframes`\r\n  0%, 100% { transform: translate(0, 0) rotate(-4deg); }\r\n  25% { transform: translate(0, -10px) rotate(4deg); }\r\n  50% { transform: translate(0, 0px) rotate(4deg); }\r\n  75% { transform: translate(0, -10px) rotate(-4deg); }\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n  animation: ${wobbleFloat} 6s ease-in-out infinite;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst CollectableCard = ({ cardId, value, suit }) => {\r\n    const dispatch = useDispatch();\r\n    const cardType = CARDS[cardId]?.rarity || 'normal';\r\n    const CardComponent = getCardComponent(cardType);\r\n    const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  \r\n    const itemConfig = {\r\n      type: 'card',\r\n      id: cardId,\r\n      name: `${value} of ${suit}`,\r\n      suit,\r\n      value\r\n    };\r\n  \r\n    const handleBeforeCollect = (equippedItem) => {\r\n      if (equippedItem?.type === 'card-box') {\r\n        dispatch(addCardToBox({ cardId }));\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n  \r\n    return (\r\n      <BaseCollectable\r\n        itemConfig={itemConfig}\r\n        onBeforeCollect={handleBeforeCollect}\r\n        renderItem={({ collected, handleCollect }) => (\r\n          <CardWrapper>\r\n            <CardComponent \r\n              collected={collected} \r\n              onClick={() => {\r\n                console.log('clicked');\r\n                handleCollect();\r\n              }}\r\n              className={suit}\r\n            >\r\n              {value} {suit === 'hearts' ? '♥' : suit === 'diamonds' ? '♦' : suit === 'clubs' ? '♣' : '♠'}\r\n            </CardComponent>\r\n          </CardWrapper>\r\n        )}\r\n      />\r\n    );\r\n  };\r\n  \r\n  export default CollectableCard;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel, markMechanicDiscovered } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport FlowerPot from '../UI/FlowerPot';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nimport CollectableCard from '../Items/CollectableCard';\r\nimport ChangeMachineButton from '../UI/ChangeMachineButton';\r\n\r\nconst Level10 = () => {\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title>Congratulations! You've completed the first 10 levels!</Card.Title>\r\n          <Card.Text>\r\n            If you haven't yet, don't worry, you'll figure out how to get there if you keep exploring!\r\n            These first levels were meant as a tutorial to introduce you to the mechanics of the game.\r\n          </Card.Text>\r\n          \r\n          <ChangeMachineButton />\r\n          <AchievementShrine requiredCount={20}>\r\n            <CenteredContainer>\r\n              <CollectableCard cardId={1} value={3} suit=\"hearts\"/>\r\n            </CenteredContainer>\r\n          </AchievementShrine>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level10;","export const getItemLocation = (state, itemId) => {\r\n  // Check equipped item\r\n  if (state.inventory.equippedItem?.id === itemId) {\r\n    return 'equipped';\r\n  }\r\n\r\n  // Check scale\r\n  if (state.inventory.scale?.id === itemId) {\r\n    return 'scale';\r\n  }\r\n\r\n  // Check bookshelf and card boxes within it\r\n  const bookshelfIndex = state.inventory.bookshelf.findIndex(item => {\r\n    if (item?.id === itemId) return true;\r\n    if (item?.type === 'card-box' && item.collectedCards?.[itemId]) {\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  if (bookshelfIndex !== -1) {\r\n    return `bookshelf-${bookshelfIndex}`;\r\n  }\r\n\r\n  // Check if card is in equipped card box\r\n  if (state.inventory.equippedItem?.type === 'card-box' && \r\n      state.inventory.equippedItem.collectedCards?.[itemId]) {\r\n    return 'equipped-box';\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const isItemAvailable = (state, itemId) => {\r\n  return getItemLocation(state, itemId) === null;\r\n}; "],"names":["_ref","itemConfig","onBeforeCollect","children","renderItem","dispatch","useDispatch","equippedItem","useSelector","state","inventory","collected","isItemAvailable","id","showSwapModal","setShowSwapModal","useState","_jsxs","_Fragment","handleCollect","type","equipItem","addCardToBox","cardId","_jsx","ConfirmationModal","show","onConfirm","handleConfirmSwap","boxWithCard","collectedCards","swapEquippedItem","newItem","onCancel","itemName","name","message","wobbleFloat","keyframes","CardWrapper","styled","div","_CARDS$cardId","value","suit","cardType","CARDS","rarity","CardComponent","getCardComponent","BaseCollectable","_ref2","onClick","console","log","className","Level10","LevelContainer","StyledCard","Card","Body","Title","Text","ChangeMachineButton","AchievementShrine","requiredCount","CenteredContainer","CollectableCard","itemId","getItemLocation","_state$inventory$equi","_state$inventory$scal","_state$inventory$equi2","_state$inventory$equi3","scale","bookshelfIndex","bookshelf","findIndex","item","_item$collectedCards"],"sourceRoot":""}