{"version":3,"file":"static/js/1003.540d3830.chunk.js","mappings":"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","sources":["components/Levels/Level0.js","components/UI/AchievementShrine.js"],"sourcesContent":["import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport HighlightableText from '../UI/HighlightableText';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport { CenteredContainer, LevelContainer, StyledCard } from './styles/CommonLevelStyles';\r\nimport { PageBackground, shimmer, refraction } from './InfinityLevelStyles';\r\nimport styled, { css, keyframes } from 'styled-components';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nconst diagonalScroll = keyframes`\r\n  0%, 100% {\r\n    background-position: 50% 100%;\r\n  }\r\n  50% {\r\n    background-position: 0 0;\r\n  }\r\n`;\r\n\r\nexport const Level0Background = styled.div`\r\n  position: fixed;\r\n  inset: 0;\r\n  perspective: 1000px;\r\n  background-image: repeating-linear-gradient(\r\n    -45deg,\r\n    ${props => props.isNegative ? '#000000' : '#f8f9fa'},\r\n    ${props => props.isNegative ? '#000000' : '#f8f9fa'} 2rem,\r\n    ${props => props.isNegative ? '#1a1a1a' : '#e9ecef'} 2rem,\r\n    ${props => props.isNegative ? '#1a1a1a' : '#e9ecef'} 4rem\r\n  );\r\n  background-size: 200% 200%;\r\n  animation: ${diagonalScroll} 20s ease-in-out infinite;\r\n\r\n  }\r\n`;\r\n\r\nconst barberpole = keyframes`\r\n  100% {\r\n    background-position: 100% 100%;\r\n  }\r\n`;\r\n\r\nconst Level0 = ({ isNegative }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Level0Background isNegative={isNegative} />\r\n      <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title as=\"h2\" className=\"mb-4\">\r\n            <CenteredContainer>\r\n              <HighlightableText\r\n                text=\"Infinite Levels!\"\r\n                size=\"xlarge\"\r\n                color=\"#333\"\r\n                enhanced={true}\r\n              />\r\n            </CenteredContainer>\r\n          </Card.Title>\r\n          <Card.Text>\r\n            <HighlightableText\r\n              text=\"Infinite Levels! is a puzzle game about exploring an infinite collection of levels.\"\r\n            />\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <HighlightableText\r\n              text=\"To proceed to a new level, press the button that displays the level number you want to go to.\"\r\n            />\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <HighlightableText\r\n              text=\"Each button will take you to the level it displays.\"\r\n            />\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <HighlightableText\r\n              text=\"This game is still in development! some things may be broken, and some things are not possible to do yet or not developed yet! Come back soon!\"\r\n            />\r\n          </Card.Text>\r\n          <CenteredContainer>\r\n            <LevelButton \r\n              targetLevel={1}\r\n              variant=\"primary\"\r\n            >\r\n              Level 1\r\n            </LevelButton>\r\n          </CenteredContainer>\r\n          {isNegative && (\r\n            <AchievementShrine maximumCount={10}>\r\n              <p>You can have up to 10 achievements.</p>\r\n            </AchievementShrine>\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n      </LevelContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Level0; ","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from 'react-bootstrap';\r\nimport allAchievements from '../../data/achievements';\r\nimport LevelButton from './LevelButton';\r\nimport debugConfig from '../../config/debug';\r\n\r\nconst ShrineContainer = styled.div`\r\n  width: 100%;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border: 2px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.isMaxShrine && `\r\n    background: rgba(70, 0, 70, 0.1);\r\n    border: 2px solid purple;\r\n  `}\r\n  \r\n  ${props => props.isComplete && !props.isMaxShrine && `\r\n    background: rgba(255, 215, 0, 0.1);\r\n    border-color: gold;\r\n  `}\r\n\r\n  ${props => props.isOverLimit && `\r\n    background: rgba(255, 0, 0, 0.1);\r\n    border-color: red;\r\n  `}\r\n`;\r\n\r\nconst ShrineSymbol = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  color: ${props => {\r\n    if (props.isMaxShrine) return 'purple';\r\n    if (props.isOverLimit) return '#ff0000';\r\n    if (props.isComplete) return 'gold';\r\n    return '#666';\r\n  }};\r\n`;\r\n\r\nconst ProgressText = styled.div`\r\n  color: ${props => props.isOverLimit ? 'red' : 'inherit'};\r\n  font-weight: ${props => props.isOverLimit ? 'bold' : 'normal'};\r\n`;\r\n\r\nconst AchievementShrine = ({ \r\n  requiredCount = null,\r\n  maximumCount = null,\r\n  children,\r\n  overLimitMessage = \"Too many achievements! You must prestige to access this content.\"\r\n}) => {\r\n  const unlockedAchievements = useSelector(state => state.achievements.achievements);\r\n  const achievementCount = Object.keys(unlockedAchievements).length;\r\n  \r\n  const isMaxShrine = maximumCount !== null;\r\n  const isOverLimit = isMaxShrine && achievementCount > maximumCount;\r\n  const hasRequiredAchievements = !isMaxShrine && (\r\n    debugConfig.isDebugMode && debugConfig.debugFeatures.unlockAllShrines ? \r\n    true : achievementCount >= requiredCount\r\n  );\r\n  \r\n  const isAccessible = isMaxShrine ? !isOverLimit : hasRequiredAchievements;\r\n\r\n  return (\r\n    <ShrineContainer>\r\n      <StyledCard isComplete={isAccessible} isOverLimit={isOverLimit} isMaxShrine={isMaxShrine}>\r\n        <Card.Body>\r\n          <ShrineSymbol \r\n            isComplete={isAccessible} \r\n            isOverLimit={isOverLimit}\r\n            isMaxShrine={isMaxShrine}\r\n          >\r\n            {isMaxShrine ? 'ðŸ”®' : (isAccessible ? 'ðŸ”“' : 'ðŸ”’')}\r\n          </ShrineSymbol>\r\n          \r\n          <Card.Title>\r\n            {isMaxShrine ? 'Prestige Shrine' : 'Achievement Shrine'}\r\n          </Card.Title>\r\n          \r\n          <ProgressText isOverLimit={isOverLimit}>\r\n            {isMaxShrine ? (\r\n              <>Current: {achievementCount} / Maximum: {maximumCount}</>\r\n            ) : (\r\n              <>Progress: {achievementCount} / {requiredCount}</>\r\n            )}\r\n          </ProgressText>\r\n          \r\n          {isMaxShrine ? (\r\n            isOverLimit ? (\r\n              <Card.Text className=\"text-danger\">\r\n                {overLimitMessage}\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          ) : (\r\n            !hasRequiredAchievements ? (\r\n              <Card.Text>\r\n                Return when you have unlocked at least {requiredCount} achievements...\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </ShrineContainer>\r\n  );\r\n};\r\n\r\nexport default AchievementShrine;"],"names":["diagonalScroll","keyframes","Level0Background","styled","div","props","isNegative","_ref","useDispatch","_jsxs","_Fragment","children","_jsx","LevelContainer","StyledCard","Card","Body","Title","as","className","CenteredContainer","HighlightableText","text","size","color","enhanced","Text","LevelButton","targetLevel","variant","AchievementShrine","maximumCount","ShrineContainer","isMaxShrine","isComplete","isOverLimit","ShrineSymbol","ProgressText","requiredCount","overLimitMessage","unlockedAchievements","useSelector","state","achievements","achievementCount","Object","keys","length","hasRequiredAchievements","debugConfig","isDebugMode","debugFeatures","unlockAllShrines","isAccessible"],"sourceRoot":""}