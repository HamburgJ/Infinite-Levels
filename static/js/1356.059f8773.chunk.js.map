{"version":3,"file":"static/js/1356.059f8773.chunk.js","mappings":"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","sources":["components/Items/BaseCollectable.js","components/Items/CollectableCardBox.js","components/Levels/Level100.js","utils/itemLocation.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { equipItem, swapEquippedItem, addCardToBox } from '../../store/slices/inventorySlice';\r\nimport ConfirmationModal from '../UI/ConfirmationModal';\r\nimport { isItemAvailable } from '../../utils/itemLocation';\r\n\r\nconst BaseCollectable = ({ \r\n  itemConfig,\r\n  onBeforeCollect,\r\n  children,\r\n  renderItem \r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  const collected = !useSelector(state => isItemAvailable(state, itemConfig.id));\r\n  const [showSwapModal, setShowSwapModal] = useState(false);\r\n\r\n  const handleCollect = () => {\r\n    if (collected) return;\r\n\r\n    if (onBeforeCollect) {\r\n      const shouldContinue = onBeforeCollect(equippedItem);\r\n      if (!shouldContinue) return;\r\n    }\r\n\r\n    if (itemConfig.type === 'card' && equippedItem?.type === 'card-box') {\r\n      dispatch(addCardToBox({ cardId: itemConfig.id }));\r\n      return;\r\n    }\r\n\r\n    if (equippedItem) {\r\n      setShowSwapModal(true);\r\n    } else {\r\n      dispatch(equipItem(itemConfig));\r\n    }\r\n  };\r\n\r\n  const handleConfirmSwap = () => {\r\n    if (equippedItem?.type === 'card' && itemConfig.type === 'card-box') {\r\n      const boxWithCard = {\r\n        ...itemConfig,\r\n        collectedCards: { [equippedItem.id]: true }\r\n      };\r\n      dispatch(equipItem(boxWithCard));\r\n    } else {\r\n      dispatch(swapEquippedItem({\r\n        newItem: itemConfig\r\n      }));\r\n    }\r\n    setShowSwapModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {renderItem({ collected, handleCollect })}\r\n\r\n      <ConfirmationModal\r\n        show={showSwapModal}\r\n        onConfirm={handleConfirmSwap}\r\n        onCancel={() => setShowSwapModal(false)}\r\n        itemName={equippedItem?.name || 'current item'}\r\n        message={`Picking up the ${itemConfig.name} will return your ${equippedItem?.name || 'current item'} to its original location. Continue?`}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BaseCollectable; ","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FaBox } from 'react-icons/fa';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { unequipItem, equipItem } from '../../store/slices/inventorySlice';\r\nimport BaseCollectable from './BaseCollectable';\r\n\r\nconst CardBoxContainer = styled.div`\r\n  text-align: center;\r\n  margin: 2rem 0;\r\n`;\r\n\r\nconst CardBox = styled.div`\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  font-size: 2rem;\r\n  color: ${props => props.theme === 'dark' ? '#fff' : '#000'};\r\n  opacity: ${props => props.collected ? 0.5 : 1};\r\n  pointer-events: ${props => props.collected ? 'none' : 'auto'};\r\n  transition: transform 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: ${props => props.collected ? 'none' : 'scale(1.1)'};\r\n  }\r\n`;\r\n\r\nconst CollectableCardBox = () => {\r\n  const dispatch = useDispatch();\r\n  const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  \r\n  const itemConfig = {\r\n    type: 'card-box',\r\n    id: 'card-box',\r\n    name: 'Card Box',\r\n    collectedCards: {}\r\n  };\r\n\r\n  const handleBeforeCollect = (equippedItem) => {\r\n    if (equippedItem?.type === 'card') {\r\n      // Add card to box and equip box\r\n      const boxWithCard = {\r\n        ...itemConfig,\r\n        collectedCards: { [equippedItem.id]: true }\r\n      };\r\n      dispatch(equipItem(boxWithCard));\r\n      return false; // Don't continue with normal collection\r\n    }\r\n    return true; // Continue with normal collection\r\n  };\r\n\r\n  return (\r\n    <BaseCollectable\r\n      itemConfig={itemConfig}\r\n      onBeforeCollect={handleBeforeCollect}\r\n      renderItem={({ collected, handleCollect }) => (\r\n        <CardBoxContainer>\r\n          <CardBox collected={collected} onClick={handleCollect}>\r\n            <FaBox />\r\n          </CardBox>\r\n        </CardBoxContainer>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CollectableCardBox; ","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel, markMechanicDiscovered } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport FlowerPot from '../UI/FlowerPot';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nimport ChangeMachineButton from '../UI/ChangeMachineButton';\r\nimport CollectableCardBox from '../Items/CollectableCardBox';\r\n\r\n\r\nconst Level100 = () => {\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title>Level 100! Woohoo!</Card.Title>\r\n          <Card.Text>\r\n            Great job getting this far! You're doing great!\r\n            Come back here after achieving 20 achievements!\r\n          </Card.Text>\r\n          <CenteredContainer>\r\n            <ChangeMachineButton />\r\n          </CenteredContainer>\r\n       \r\n          <AchievementShrine requiredCount={20}>\r\n            <CenteredContainer>\r\n              <CollectableCardBox />\r\n            </CenteredContainer>\r\n          </AchievementShrine>\r\n          <CenteredContainer>\r\n            <LevelButton targetLevel={10000000}>Level 20</LevelButton>\r\n            \r\n          </CenteredContainer>\r\n          <CenteredContainer>\r\n            <LevelButton targetLevel={10000000}>Level 10</LevelButton>\r\n          </CenteredContainer>\r\n          <CenteredContainer>\r\n            <LevelButton targetLevel={10000000}>Level 0</LevelButton>\r\n          </CenteredContainer>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level100;","export const getItemLocation = (state, itemId) => {\r\n  // Check equipped item\r\n  if (state.inventory.equippedItem?.id === itemId) {\r\n    return 'equipped';\r\n  }\r\n\r\n  // Check scale\r\n  if (state.inventory.scale?.id === itemId) {\r\n    return 'scale';\r\n  }\r\n\r\n  // Check bookshelf and card boxes within it\r\n  const bookshelfIndex = state.inventory.bookshelf.findIndex(item => {\r\n    if (item?.id === itemId) return true;\r\n    if (item?.type === 'card-box' && item.collectedCards?.[itemId]) {\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  if (bookshelfIndex !== -1) {\r\n    return `bookshelf-${bookshelfIndex}`;\r\n  }\r\n\r\n  // Check if card is in equipped card box\r\n  if (state.inventory.equippedItem?.type === 'card-box' && \r\n      state.inventory.equippedItem.collectedCards?.[itemId]) {\r\n    return 'equipped-box';\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const isItemAvailable = (state, itemId) => {\r\n  return getItemLocation(state, itemId) === null;\r\n}; "],"names":["_ref","itemConfig","onBeforeCollect","children","renderItem","dispatch","useDispatch","equippedItem","useSelector","state","inventory","collected","isItemAvailable","id","showSwapModal","setShowSwapModal","useState","_jsxs","_Fragment","handleCollect","type","equipItem","addCardToBox","cardId","_jsx","ConfirmationModal","show","onConfirm","handleConfirmSwap","boxWithCard","collectedCards","swapEquippedItem","newItem","onCancel","itemName","name","message","CardBoxContainer","styled","div","CardBox","props","theme","CollectableCardBox","BaseCollectable","onClick","FaBox","Level100","LevelContainer","StyledCard","Card","Body","Title","Text","CenteredContainer","ChangeMachineButton","AchievementShrine","requiredCount","LevelButton","targetLevel","itemId","getItemLocation","_state$inventory$equi","_state$inventory$scal","_state$inventory$equi2","_state$inventory$equi3","scale","bookshelfIndex","bookshelf","findIndex","item","_item$collectedCards"],"sourceRoot":""}