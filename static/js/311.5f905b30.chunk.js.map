{"version":3,"file":"static/js/311.5f905b30.chunk.js","mappings":"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","sources":["components/UI/LockedBox.js","components/Levels/Level9.js","components/UI/AchievementShrine.js","../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/AccordionItemContext.js","../node_modules/react-bootstrap/esm/AccordionBody.js","../node_modules/react-bootstrap/esm/AccordionButton.js","../node_modules/react-bootstrap/esm/AccordionHeader.js","../node_modules/react-bootstrap/esm/AccordionItem.js","../node_modules/react-bootstrap/esm/Accordion.js","components/UI/NestedAccordion.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { FaLock, FaLockOpen, FaBox } from 'react-icons/fa';\r\n\r\nconst BoxContainer = styled.div`\r\n  text-align: center;\r\n  margin: 2rem 0;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  display: inline-block;\r\n  cursor: ${props => props.hasKey ? 'pointer' : 'not-allowed'};\r\n  font-size: 3rem;\r\n  position: relative;\r\n  opacity: ${props => props.isOpen ? 0.7 : 1};\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: ${props => props.hasKey ? 'scale(1.1)' : 'none'};\r\n  }\r\n`;\r\n\r\nconst Lock = styled.div`\r\n  position: absolute;\r\n  top: -15px;\r\n  right: -15px;\r\n  font-size: 2rem;\r\n  color: gold;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  margin-top: 1rem;\r\n  padding: 1rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background: #f9f9f9;\r\n  display: ${props => props.isVisible ? 'block' : 'none'};\r\n`;\r\n\r\nconst LockedBox = ({ children, requiredKey = 'key-1' }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isContentVisible, setIsContentVisible] = useState(false);\r\n  const inventory = useSelector(state => state.inventory.equippedItem);\r\n  const hasKey = inventory && inventory[requiredKey];\r\n\r\n  const handleClick = () => {\r\n    if (hasKey && !isOpen) {\r\n      setIsOpen(true);\r\n      setTimeout(() => setIsContentVisible(true), 500);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BoxContainer>\r\n      <Box hasKey={hasKey} isOpen={isOpen} onClick={handleClick}>\r\n        <FaBox />\r\n        <Lock>\r\n          {isOpen ? <FaLockOpen /> : <FaLock />}\r\n        </Lock>\r\n      </Box>\r\n      <Content isVisible={isContentVisible}>\r\n        {children}\r\n      </Content>\r\n    </BoxContainer>\r\n  );\r\n};\r\n\r\nexport default LockedBox; ","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport NestedAccordion from '../UI/NestedAccordion';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport { FaTrophy } from 'react-icons/fa';\r\nimport Scale from '../Storage/Scale';\r\nimport HighlightableText from '../UI/HighlightableText';\r\nimport LockedBox from '../UI/LockedBox';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nconst Level9 = () => {\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title><HighlightableText size=\"large\" text=\"Secrets\"/></Card.Title>\r\n          <Card.Text>\r\n            <HighlightableText text=\"Congratulations. Reaching this level means that you've mastered the basics of this game. However, there\r\n            another secret ability which will unlock a truly magnificently infinite amount of levels!\"/>\r\n            </Card.Text>\r\n            <Card.Text>\r\n            <HighlightableText text=\"The secret lays inside the box below.  A hint to \r\n            the secret place will be revealed here once you've completed x achievements!\"/>\r\n            </Card.Text>\r\n            <AchievementShrine requiredCount={30}>\r\n              <CenteredContainer>\r\n              The key to the box is stored in an extremely secret place! The information that will lead you to the key is hidden in a mysterious level which is thought by some not to exist.\r\n                A level which equates to the 0th level yet its opposite. A level which is infinitely close yet infinitely far. \r\n              </CenteredContainer>\r\n              <LockedBox>\r\n              <Card.Text>\r\n                <HighlightableText text=\"Like you know, buttons can be created from anywhere.\r\n                But did you know that these buttons can be collected into your inventory? Just highlight some text to create a button, and \r\n                right click to pick it up! You can carry it around with you, and click it to travel to that level!\"/>\r\n              </Card.Text>\r\n              </LockedBox>\r\n            </AchievementShrine>\r\n          <CenteredContainer>\r\n            <LevelButton targetLevel={3}>Level 3</LevelButton>\r\n          </CenteredContainer>\r\n\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level9; ","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from 'react-bootstrap';\r\nimport allAchievements from '../../data/achievements';\r\nimport LevelButton from './LevelButton';\r\nimport debugConfig from '../../config/debug';\r\n\r\nconst ShrineContainer = styled.div`\r\n  width: 100%;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border: 2px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.isMaxShrine && `\r\n    background: rgba(70, 0, 70, 0.1);\r\n    border: 2px solid purple;\r\n  `}\r\n  \r\n  ${props => props.isComplete && !props.isMaxShrine && `\r\n    background: rgba(255, 215, 0, 0.1);\r\n    border-color: gold;\r\n  `}\r\n\r\n  ${props => props.isOverLimit && `\r\n    background: rgba(255, 0, 0, 0.1);\r\n    border-color: red;\r\n  `}\r\n`;\r\n\r\nconst ShrineSymbol = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  color: ${props => {\r\n    if (props.isMaxShrine) return 'purple';\r\n    if (props.isOverLimit) return '#ff0000';\r\n    if (props.isComplete) return 'gold';\r\n    return '#666';\r\n  }};\r\n`;\r\n\r\nconst ProgressText = styled.div`\r\n  color: ${props => props.isOverLimit ? 'red' : 'inherit'};\r\n  font-weight: ${props => props.isOverLimit ? 'bold' : 'normal'};\r\n`;\r\n\r\nconst AchievementShrine = ({ \r\n  requiredCount = null,\r\n  maximumCount = null,\r\n  children,\r\n  overLimitMessage = \"Too many achievements! You must prestige to access this content.\"\r\n}) => {\r\n  const unlockedAchievements = useSelector(state => state.achievements.achievements);\r\n  const achievementCount = Object.keys(unlockedAchievements).length;\r\n  \r\n  const isMaxShrine = maximumCount !== null;\r\n  const isOverLimit = isMaxShrine && achievementCount > maximumCount;\r\n  const hasRequiredAchievements = !isMaxShrine && (\r\n    debugConfig.isDebugMode && debugConfig.debugFeatures.unlockAllShrines ? \r\n    true : achievementCount >= requiredCount\r\n  );\r\n  \r\n  const isAccessible = isMaxShrine ? !isOverLimit : hasRequiredAchievements;\r\n\r\n  return (\r\n    <ShrineContainer>\r\n      <StyledCard isComplete={isAccessible} isOverLimit={isOverLimit} isMaxShrine={isMaxShrine}>\r\n        <Card.Body>\r\n          <ShrineSymbol \r\n            isComplete={isAccessible} \r\n            isOverLimit={isOverLimit}\r\n            isMaxShrine={isMaxShrine}\r\n          >\r\n            {isMaxShrine ? '🔮' : (isAccessible ? '🔓' : '🔒')}\r\n          </ShrineSymbol>\r\n          \r\n          <Card.Title>\r\n            {isMaxShrine ? 'Prestige Shrine' : 'Achievement Shrine'}\r\n          </Card.Title>\r\n          \r\n          <ProgressText isOverLimit={isOverLimit}>\r\n            {isMaxShrine ? (\r\n              <>Current: {achievementCount} / Maximum: {maximumCount}</>\r\n            ) : (\r\n              <>Progress: {achievementCount} / {requiredCount}</>\r\n            )}\r\n          </ProgressText>\r\n          \r\n          {isMaxShrine ? (\r\n            isOverLimit ? (\r\n              <Card.Text className=\"text-danger\">\r\n                {overLimitMessage}\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          ) : (\r\n            !hasRequiredAchievements ? (\r\n              <Card.Text>\r\n                Return when you have unlocked at least {requiredCount} achievements...\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </ShrineContainer>\r\n  );\r\n};\r\n\r\nexport default AchievementShrine;","\"use client\";\n\nimport * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null || onSelect(eventKeyPassed, e);\n    onClick == null || onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});","import React from 'react';\r\nimport { Accordion } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport HighlightableText from './HighlightableText';\r\n\r\nconst AccordionWrapper = styled.div`\r\n  margin: 0.5rem 0;\r\n`;\r\n\r\nconst TextWrapper = styled.div`\r\n  padding: 0.5rem;\r\n`;\r\nconst StyledAccordion = styled(Accordion)`\r\n  .accordion-button:not(.collapsed) {\r\n    color: inherit;\r\n    background-color: rgba(0, 0, 0, 0.03);\r\n    box-shadow: none;\r\n  }\r\n\r\n  .accordion-button:focus {\r\n    box-shadow: none;\r\n    border-color: rgba(0, 0, 0, 0.125);\r\n  }\r\n\r\n  .accordion-button::after {\r\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");\r\n  }\r\n\r\n  .accordion-button:not(.collapsed)::after {\r\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");\r\n  }\r\n`;\r\nconst NestedAccordion = ({ \r\n  data, \r\n  openSections = [], \r\n  visitedSections = [], \r\n  onToggle,\r\n  depth = 0, \r\n  path = '' \r\n}) => {\r\n  if (Array.isArray(data)) {\r\n    if (data.length === 0) {\r\n      return (\r\n        <TextWrapper>\r\n          <HighlightableText text=\"Keep searching...\" />\r\n        </TextWrapper>\r\n      );\r\n    }\r\n\r\n    if (typeof data[0] === 'string' || React.isValidElement(data[0])) {\r\n      return (\r\n        <TextWrapper>\r\n          {typeof data[0] === 'string' ? (\r\n            <HighlightableText text={data.join(' ')} />\r\n          ) : (\r\n            data[0]\r\n          )}\r\n        </TextWrapper>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <StyledAccordion \r\n        activeKey={openSections.filter(key => key.startsWith(path))}\r\n        alwaysOpen\r\n      >\r\n        {data.map((item, index) => {\r\n          const currentPath = path ? `${path}-${index}` : `${index}`;\r\n          const isVisited = visitedSections.includes(currentPath);\r\n          \r\n          return (\r\n            <Accordion.Item \r\n              key={currentPath} \r\n              eventKey={currentPath}\r\n              className={isVisited ? 'visited' : ''}\r\n            >\r\n              <Accordion.Header \r\n                onClick={() => onToggle(currentPath)}\r\n              />\r\n              <Accordion.Body>\r\n                <NestedAccordion \r\n                  data={item}\r\n                  openSections={openSections}\r\n                  visitedSections={visitedSections} \r\n                  onToggle={onToggle}\r\n                  depth={depth + 1}\r\n                  path={currentPath}\r\n                />\r\n              </Accordion.Body>\r\n            </Accordion.Item>\r\n          );\r\n        })}\r\n      </StyledAccordion>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default NestedAccordion; "],"names":["BoxContainer","styled","div","Box","props","hasKey","isOpen","Lock","Content","isVisible","_ref","children","requiredKey","setIsOpen","useState","isContentVisible","setIsContentVisible","inventory","useSelector","state","equippedItem","_jsxs","onClick","handleClick","setTimeout","_jsx","FaBox","FaLockOpen","FaLock","Level9","LevelContainer","StyledCard","Card","Body","Title","HighlightableText","size","text","Text","AchievementShrine","requiredCount","CenteredContainer","LockedBox","LevelButton","targetLevel","ShrineContainer","isMaxShrine","isComplete","isOverLimit","ShrineSymbol","ProgressText","maximumCount","overLimitMessage","unlockedAchievements","achievements","achievementCount","Object","keys","length","hasRequiredAchievements","debugConfig","isDebugMode","debugFeatures","unlockAllShrines","isAccessible","_Fragment","className","isAccordionItemSelected","activeEventKey","eventKey","Array","isArray","includes","context","React","displayName","AccordionCollapse","ref","as","Component","bsPrefix","useContext","AccordionContext","useBootstrapPrefix","Collapse","in","classNames","only","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","accordionOnClick","onSelect","alwaysOpen","e","eventKeyPassed","filter","k","useAccordionButton","type","AccordionHeader","AccordionItem","contextValue","useMemo","Provider","value","Accordion","activeKey","flush","controlledProps","useUncontrolled","prefix","assign","Button","Item","Header","TextWrapper","StyledAccordion","NestedAccordion","data","openSections","visitedSections","onToggle","depth","path","join","key","startsWith","map","item","index","currentPath","isVisited"],"sourceRoot":""}