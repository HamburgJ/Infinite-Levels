{"version":3,"file":"static/js/5325.2972f8a3.chunk.js","mappings":"kMAOA,MAAMA,EAAkBC,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;eAenBC,GAASA,EAAMC,eAAiB,0BAA4B;;;;;;;;;;;;;;;;;;;;;;;;EA0BrEC,EAAcJ,EAAAA,GAAOK,IAAI;;;;;;;;EAUzBC,EAAaN,EAAAA,GAAOC,GAAG;;;;EAMvBM,EAAmB,CACvB,GAAM,CACJC,aAAc,IACdC,QAAS,mKAEX,EAAK,CACHD,aAAc,IACdC,QAAS,sQAEX,EAAK,CACHD,aAAc,KACdC,QAAS,sLA4Cb,EAxCeC,IAAuB,IAAtB,aAAEC,GAAcD,EAC9B,MAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAiBC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,OAAOC,mBAClDf,EAAgBgB,GAAqBC,EAAAA,UAAe,GAQ3D,IANAC,EAAAA,EAAAA,YAAU,KACJP,IAAmBH,GACrBC,GAASU,EAAAA,EAAAA,MACX,GACC,CAACV,EAAUE,EAAgBH,IAE1BG,IAAmBH,EACrB,OAAO,KAWT,OACEY,EAAAA,EAAAA,MAACxB,EAAe,CAACI,eAAgBA,EAAeqB,SAAA,EAC9CC,EAAAA,EAAAA,KAACrB,EAAW,CAAAoB,SAAC,kBACbC,EAAAA,EAAAA,KAACnB,EAAU,CAAAkB,SACRjB,EAAiBO,GAAgBL,WAEpCgB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,QAAQ,kBACRC,QAhBeC,KACnBV,GAAkB,GAClBW,YAAW,KACT,MAAMtB,EAAeD,EAAiBO,GAAgBN,aACtDI,GAASmB,EAAAA,EAAAA,GAAkBvB,GAAc,GACxC,IAAI,EAYHwB,KAAK,KAAIR,SACV,aAGe,C,gJCtGtB,MAuBA,EAvBgBS,KAGZR,EAAAA,EAAAA,KAACS,EAAAA,GAAc,CAAAV,UACbC,EAAAA,EAAAA,KAACU,EAAAA,GAAU,CAAAX,UACTD,EAAAA,EAAAA,MAACa,EAAAA,EAAKC,KAAI,CAAAb,SAAA,EACRC,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,MAAK,CAAAd,SAAC,mCACZC,EAAAA,EAAAA,KAACW,EAAAA,EAAKG,KAAI,CAAAf,SAAC,qIAIXC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAAC7B,aAAa,QACrBc,EAAAA,EAAAA,KAACgB,EAAAA,GAAiB,CAAAjB,UAChBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CAACC,YAAa,GAAGnB,SAAC,qB,iHClB1C,MAAMoB,EAAkB5C,EAAAA,GAAOC,GAAG;;;;EAM5BkC,GAAanC,EAAAA,EAAAA,IAAOoC,EAAAA,EAAK;;;;;;;IAO3BlC,GAASA,EAAM2C,aAAe;;IAK9B3C,GAASA,EAAM4C,aAAe5C,EAAM2C,aAAe;;IAKnD3C,GAASA,EAAM6C,aAAe;EAM5BC,EAAehD,EAAAA,GAAOC,GAAG;;;WAGpBC,GACHA,EAAM2C,YAAoB,SAC1B3C,EAAM6C,YAAoB,UAC1B7C,EAAM4C,WAAmB,OACtB;EAILG,EAAejD,EAAAA,GAAOC,GAAG;WACpBC,GAASA,EAAM6C,YAAc,MAAQ;iBAC/B7C,GAASA,EAAM6C,YAAc,OAAS;EAwEvD,EArE0BrC,IAKnB,IALoB,cACzBwC,EAAgB,KAAI,aACpBC,EAAe,KAAI,SACnB3B,EAAQ,iBACR4B,EAAmB,oEACpB1C,EACC,MAAM2C,GAAuBtC,EAAAA,EAAAA,KAAYC,GAASA,EAAMsC,aAAaA,eAC/DC,EAAmBC,OAAOC,KAAKJ,GAAsBK,OAErDb,EAA+B,OAAjBM,EACdJ,EAAcF,GAAeU,EAAmBJ,EAChDQ,GAA2Bd,OAC/Be,EAAAA,EAAYC,cAAeD,EAAAA,EAAYE,cAAcC,mBAC9CR,GAAoBL,GAGvBc,EAAenB,GAAeE,EAAcY,EAElD,OACElC,EAAAA,EAAAA,KAACmB,EAAe,CAAApB,UACdC,EAAAA,EAAAA,KAACU,EAAU,CAACW,WAAYkB,EAAcjB,YAAaA,EAAaF,YAAaA,EAAYrB,UACvFD,EAAAA,EAAAA,MAACa,EAAAA,EAAKC,KAAI,CAAAb,SAAA,EACRC,EAAAA,EAAAA,KAACuB,EAAY,CACXF,WAAYkB,EACZjB,YAAaA,EACbF,YAAaA,EAAYrB,SAExBqB,EAAc,eAAQmB,EAAe,eAAO,kBAG/CvC,EAAAA,EAAAA,KAACW,EAAAA,EAAKE,MAAK,CAAAd,SACRqB,EAAc,kBAAoB,wBAGrCpB,EAAAA,EAAAA,KAACwB,EAAY,CAACF,YAAaA,EAAYvB,SACpCqB,GACCtB,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAAzC,SAAA,CAAE,YAAU+B,EAAiB,eAAaJ,MAE1C5B,EAAAA,EAAAA,MAAA0C,EAAAA,SAAA,CAAAzC,SAAA,CAAE,aAAW+B,EAAiB,MAAIL,OAIrCL,EACCE,GACEtB,EAAAA,EAAAA,KAACW,EAAAA,EAAKG,KAAI,CAAC2B,UAAU,cAAa1C,SAC/B4B,KAGH3B,EAAAA,EAAAA,KAACW,EAAAA,EAAKG,KAAI,CAAAf,SACPA,IAIJmC,GAKClC,EAAAA,EAAAA,KAACW,EAAAA,EAAKG,KAAI,CAAAf,SACPA,KALHD,EAAAA,EAAAA,MAACa,EAAAA,EAAKG,KAAI,CAAAf,SAAA,CAAC,0CAC+B0B,EAAc,4BAUhD,C,yIC9GtB,MAAMiB,EAAenE,EAAAA,GAAOC,GAAG;;;;;;EAQzBmE,EAAgBpE,EAAAA,GAAOC,GAAG;;;;YAIpBC,GAASA,EAAMmE,UAAY,UAAY;;;iBAGlCnE,GAASA,EAAMmE,UAAY,aAAe;;EAIrDC,EAAgBtE,EAAAA,GAAOC,GAAG;;;;;EAO1BsE,EAAoBvE,EAAAA,GAAOC,GAAG;;;EAK9BuE,EAAiBA,CAACC,EAAaC,KACnC,IAAKA,EAAY,OAAO,KACxB,MAAMC,EAASC,EAAAA,EAAYF,GAAYC,OACjCE,EAASrB,OAAOC,KAAKkB,GAAQG,IAAIC,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAElE,IAAK,IAAIC,EAAIN,EAAOnB,OAAS,EAAGyB,GAAK,EAAGA,IACtC,GAAIV,GAAeI,EAAOM,GACxB,OAAOR,EAAOE,EAAOM,IAGzB,OAAOR,EAAO,EAAE,EAGZS,EAAmBA,CAACX,EAAaC,KACrC,IAAKA,EAAY,MAAO,uDAExB,MAAMW,EAAWT,EAAAA,EAAYF,GAAYW,SACnCR,EAASrB,OAAOC,KAAK4B,GAAUP,IAAIC,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAEpE,IAAK,IAAIC,EAAIN,EAAOnB,OAAS,EAAGyB,GAAK,EAAGA,IACtC,GAAIV,GAAeI,EAAOM,GACxB,OAAOE,EAASR,EAAOM,IAG3B,OAAOE,EAAS,EAAE,EA+JpB,EAjIkBC,KAChB,MAAM1E,GAAWC,EAAAA,EAAAA,OACX,SAAE0E,EAAQ,YAAEd,EAAW,WAAEC,IAAe3D,EAAAA,EAAAA,KAAYC,GAASA,EAAMwE,SACnEC,GAAe1E,EAAAA,EAAAA,KAAYC,GAASA,EAAM0E,UAAUD,gBACnDE,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAmBC,IAAwBF,EAAAA,EAAAA,WAAS,IACpDG,EAAeC,IAAoBJ,EAAAA,EAAAA,WAAS,GAmDnD,OACEtE,EAAAA,EAAAA,MAAC4C,EAAY,CAAA3C,SAAA,EACXC,EAAAA,EAAAA,KAAC2C,EAAa,CACZC,UAAWkB,EACX3D,QAhCoBsE,KACnBX,GACLQ,GAAqB,EAAK,EA8BKvE,SAE1B+D,EAAWf,EAAeC,EAAaC,GAAc,OAGvDa,IACChE,EAAAA,EAAAA,MAACgD,EAAiB,CAAA/C,SAAA,EAChBC,EAAAA,EAAAA,KAAA,OAAK0E,MAAO,CAAEC,aAAc,SAAUC,SAAU,SAAUC,MAAO,QAAS9E,SAAC,YAC3EC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAW,CACVC,IAxDoBC,MAC5B,MAAMC,EAPkBC,MACxB,IAAKjC,EAAY,OAAO,EACxB,MAAMC,EAASnB,OAAOC,KAAKmB,EAAAA,EAAYF,GAAYC,QAAQG,IAAIC,QAC/D,OAAO6B,KAAKC,OAAOlC,EAAO,EAITgC,GACjB,OAAOC,KAAKE,IAAKrC,EAAciC,EAAY,IAAK,IAAI,EAsDvCD,GACL9E,QAAQ,gBAKdF,EAAAA,EAAAA,KAAC6C,EAAa,CAAA9C,SACX+D,EAAWH,EAAiBX,EAAaC,GAAc,0DAG1DjD,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,QAAS4D,EAAW,iBAAmB,kBACvC3D,QA/DmBmF,KACnBxB,EACFK,GAAe,IACM,OAAZH,QAAY,IAAZA,GAAAA,EAAcuB,KACvBpG,GAASqG,EAAAA,EAAAA,OAGX,EAyDIjF,KAAK,KAAIR,SAER+D,EAAW,iBAAmB,gBAGjChE,EAAAA,EAAAA,MAAC2F,EAAAA,EAAK,CAACC,KAAMxB,EAAayB,OAAQA,IAAMxB,GAAe,GAAOpE,SAAA,EAC5DC,EAAAA,EAAAA,KAACyF,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAA9F,UACvBC,EAAAA,EAAAA,KAACyF,EAAAA,EAAM5E,MAAK,CAAAd,SAAC,8BAEfC,EAAAA,EAAAA,KAACyF,EAAAA,EAAM7E,KAAI,CAAAb,SAAC,wEAGZD,EAAAA,EAAAA,MAAC2F,EAAAA,EAAMK,OAAM,CAAA/F,SAAA,EACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAAQ,YAAYC,QAASA,IAAMgE,GAAe,GAAOpE,SAAC,YAGlEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAAQ,SAASC,QAASA,KAChChB,GAAS4G,EAAAA,EAAAA,OACT5G,GAASqG,EAAAA,EAAAA,OACTrB,GAAe,EAAM,EACrBpE,SAAC,yBAMPD,EAAAA,EAAAA,MAAC2F,EAAAA,EAAK,CAACC,KAAMrB,EAAmBsB,OAAQA,IAAMrB,GAAqB,GAAOvE,SAAA,EACxEC,EAAAA,EAAAA,KAACyF,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAA9F,UACvBC,EAAAA,EAAAA,KAACyF,EAAAA,EAAM5E,MAAK,CAAAd,SAAC,uBAEfC,EAAAA,EAAAA,KAACyF,EAAAA,EAAM7E,KAAI,CAAAb,SAAC,sIAGZD,EAAAA,EAAAA,MAAC2F,EAAAA,EAAMK,OAAM,CAAA/F,SAAA,EACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAAQ,YAAYC,QAASA,IAAMmE,GAAqB,GAAOvE,SAAC,YAGxEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAAQ,UAAUC,QAtFN6F,KAC1B,MAAM9C,EAASnB,OAAOC,KAAKmB,EAAAA,EAAYF,GAAYC,QAAQG,IAAIC,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAC1F,IAAIwC,EAAe,EACnB,IAAK,IAAIC,KAAShD,EACZF,GAAekD,IACjBD,EAAeC,GAInB,MAAMC,EAAa,CACjBZ,KAAM,SACNtC,aACAD,cACAkD,MAAOnD,EAAeC,EAAaC,GACnCmD,KAAM,GAAGnD,EAAWoD,OAAO,GAAGC,cAAgBrD,EAAWsD,MAAM,eAAevD,KAC9EwD,OAAQrD,EAAAA,EAAYF,GAAYwD,QAAQR,IAG1C9G,GAASuH,EAAAA,EAAAA,IAAUP,IACnBhH,GAAS4G,EAAAA,EAAAA,OACTzB,GAAqB,EAAM,EAkEkCvE,SAAC,2BAK/C,C","sources":["components/Characters/Jester.js","components/Levels/Level11.js","components/UI/AchievementShrine.js","components/UI/FlowerPot.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setJesterLocation} from '../../store/slices/jesterSlice';\r\nimport { incrementJesterEncounters } from '../../store/slices/gameSlice';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst JesterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.5rem;\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(240, 240, 240, 0.85));\r\n  padding: 0.5rem;\r\n  border-radius: 12px;\r\n  margin: 1.5rem 0;\r\n  box-shadow: \r\n    0 4px 6px rgba(0, 0, 0, 0.1),\r\n    0 1px 3px rgba(0, 0, 0, 0.08),\r\n    inset 0 1px 1px rgba(255, 255, 255, 0.5);\r\n  border: 1px solid rgba(0, 0, 0, 0.3);\r\n  backdrop-filter: blur(5px);\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n  animation: ${props => props.isDisappearing ? 'disappear 0.5s forwards' : 'none'};\r\n\r\n  @keyframes disappear {\r\n    0% {\r\n      opacity: 1;\r\n      transform: scale(1) rotate(0deg);\r\n    }\r\n    50% {\r\n      opacity: 0.5;\r\n      transform: scale(0.8) rotate(180deg);\r\n    }\r\n    100% {\r\n      opacity: 0;\r\n      transform: scale(0) rotate(360deg);\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: \r\n      0 6px 8px rgba(0, 0, 0, 0.12),\r\n      0 2px 4px rgba(0, 0, 0, 0.08),\r\n      inset 0 1px 1px rgba(255, 255, 255, 0.6);\r\n  }\r\n`;\r\n\r\nconst JesterEmoji = styled.span`\r\n  font-size: 2rem;\r\n  animation: float 2s ease-in-out infinite;\r\n\r\n  @keyframes float {\r\n    0%, 100% { transform: translateY(0); }\r\n    50% { transform: translateY(-10px); }\r\n  }\r\n`;\r\n\r\nconst JesterText = styled.div`\r\n  flex: 1;\r\n  font-style: italic;\r\n  color: #666;\r\n`;\r\n\r\nconst JESTER_LOCATIONS = {\r\n  '11': {\r\n    nextLocation: '8',\r\n    message: \"Ah, the sparse levels! *juggles some numbers* Did you know that if you look carefully at Level 8, you might find some interesting traveling techniques? *winks*\"\r\n  },\r\n  '8': {\r\n    nextLocation: '9',\r\n    message: \"Ohoho! Advanced techniques, indeed! But the real magic lies in the secrets... *pulls a rabbit from a hat* Why don't you check Level 9? There might be a mysterious box waiting to be unlocked! *disappears in a puff of smoke, then reappears* Oh, I'm still here!\"\r\n  },\r\n  '9': {\r\n    nextLocation: null,\r\n    message: \"The grand finale! *throws confetti* You've found all my hiding spots! But remember, in this world of numbers and mysteries, nothing is quite what it seems... *bows theatrically*\"\r\n  }\r\n};\r\n\r\nconst Jester = ({ currentLevel }) => {\r\n  const dispatch = useDispatch();\r\n  const jesterLocation = useSelector(state => state.jester.currentLocation);\r\n  const [isDisappearing, setIsDisappearing] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (jesterLocation === currentLevel) {\r\n      dispatch(incrementJesterEncounters());\r\n    }\r\n  }, [dispatch, jesterLocation, currentLevel]);\r\n\r\n  if (jesterLocation !== currentLevel) {\r\n    return null;\r\n  }\r\n\r\n  const handleTravel = () => {\r\n    setIsDisappearing(true);\r\n    setTimeout(() => {\r\n      const nextLocation = JESTER_LOCATIONS[jesterLocation].nextLocation;\r\n      dispatch(setJesterLocation(nextLocation));\r\n    }, 500); // Wait for animation to complete\r\n  };\r\n\r\n  return (\r\n    <JesterContainer isDisappearing={isDisappearing}>\r\n      <JesterEmoji>🃏</JesterEmoji>\r\n      <JesterText>\r\n        {JESTER_LOCATIONS[jesterLocation].message}\r\n      </JesterText>\r\n      <Button \r\n        variant=\"outline-primary\" \r\n        onClick={handleTravel}\r\n        size=\"sm\"\r\n      >\r\n        *poof*\r\n      </Button>\r\n    </JesterContainer>\r\n  );\r\n};\r\n\r\nexport default Jester;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel, markMechanicDiscovered } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport FlowerPot from '../UI/FlowerPot';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nimport Jester from '../Characters/Jester';\r\n\r\nconst Level11 = () => {\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title>The levels become more sparse</Card.Title>\r\n          <Card.Text>\r\n            But it's only to avoid having too much fluff!\r\n            Why don't you see what else you can do with the levels you've already discovered?\r\n          </Card.Text>\r\n          <Jester currentLevel=\"11\" />\r\n          <CenteredContainer>\r\n            <LevelButton targetLevel={10}>\r\n              Level 10\r\n            </LevelButton>\r\n          </CenteredContainer>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level11;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from 'react-bootstrap';\r\nimport allAchievements from '../../data/achievements';\r\nimport LevelButton from './LevelButton';\r\nimport debugConfig from '../../config/debug';\r\n\r\nconst ShrineContainer = styled.div`\r\n  width: 100%;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border: 2px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.isMaxShrine && `\r\n    background: rgba(70, 0, 70, 0.1);\r\n    border: 2px solid purple;\r\n  `}\r\n  \r\n  ${props => props.isComplete && !props.isMaxShrine && `\r\n    background: rgba(255, 215, 0, 0.1);\r\n    border-color: gold;\r\n  `}\r\n\r\n  ${props => props.isOverLimit && `\r\n    background: rgba(255, 0, 0, 0.1);\r\n    border-color: red;\r\n  `}\r\n`;\r\n\r\nconst ShrineSymbol = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  color: ${props => {\r\n    if (props.isMaxShrine) return 'purple';\r\n    if (props.isOverLimit) return '#ff0000';\r\n    if (props.isComplete) return 'gold';\r\n    return '#666';\r\n  }};\r\n`;\r\n\r\nconst ProgressText = styled.div`\r\n  color: ${props => props.isOverLimit ? 'red' : 'inherit'};\r\n  font-weight: ${props => props.isOverLimit ? 'bold' : 'normal'};\r\n`;\r\n\r\nconst AchievementShrine = ({ \r\n  requiredCount = null,\r\n  maximumCount = null,\r\n  children,\r\n  overLimitMessage = \"Too many achievements! You must prestige to access this content.\"\r\n}) => {\r\n  const unlockedAchievements = useSelector(state => state.achievements.achievements);\r\n  const achievementCount = Object.keys(unlockedAchievements).length;\r\n  \r\n  const isMaxShrine = maximumCount !== null;\r\n  const isOverLimit = isMaxShrine && achievementCount > maximumCount;\r\n  const hasRequiredAchievements = !isMaxShrine && (\r\n    debugConfig.isDebugMode && debugConfig.debugFeatures.unlockAllShrines ? \r\n    true : achievementCount >= requiredCount\r\n  );\r\n  \r\n  const isAccessible = isMaxShrine ? !isOverLimit : hasRequiredAchievements;\r\n\r\n  return (\r\n    <ShrineContainer>\r\n      <StyledCard isComplete={isAccessible} isOverLimit={isOverLimit} isMaxShrine={isMaxShrine}>\r\n        <Card.Body>\r\n          <ShrineSymbol \r\n            isComplete={isAccessible} \r\n            isOverLimit={isOverLimit}\r\n            isMaxShrine={isMaxShrine}\r\n          >\r\n            {isMaxShrine ? '🔮' : (isAccessible ? '🔓' : '🔒')}\r\n          </ShrineSymbol>\r\n          \r\n          <Card.Title>\r\n            {isMaxShrine ? 'Prestige Shrine' : 'Achievement Shrine'}\r\n          </Card.Title>\r\n          \r\n          <ProgressText isOverLimit={isOverLimit}>\r\n            {isMaxShrine ? (\r\n              <>Current: {achievementCount} / Maximum: {maximumCount}</>\r\n            ) : (\r\n              <>Progress: {achievementCount} / {requiredCount}</>\r\n            )}\r\n          </ProgressText>\r\n          \r\n          {isMaxShrine ? (\r\n            isOverLimit ? (\r\n              <Card.Text className=\"text-danger\">\r\n                {overLimitMessage}\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          ) : (\r\n            !hasRequiredAchievements ? (\r\n              <Card.Text>\r\n                Return when you have unlocked at least {requiredCount} achievements...\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </ShrineContainer>\r\n  );\r\n};\r\n\r\nexport default AchievementShrine;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { plantSeed, removePlant } from '../../store/slices/flowerSlice';\r\nimport { Card, Button, Modal, ProgressBar } from 'react-bootstrap';\r\nimport flowerTypes from '../../data/flowerTypes';\r\nimport { equipItem } from '../../store/slices/inventorySlice';\r\n\r\nconst PotContainer = styled.div`\r\n  text-align: center;\r\n  margin: 2rem 0;\r\n  padding: 1rem;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst FlowerDisplay = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  transition: all 0.3s ease;\r\n  cursor: ${props => props.clickable ? 'pointer' : 'default'};\r\n  \r\n  &:hover {\r\n    transform: ${props => props.clickable ? 'scale(1.1)' : 'none'};\r\n  }\r\n`;\r\n\r\nconst FlowerMessage = styled.div`\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n  margin: 1rem 0;\r\n  font-style: italic;\r\n`;\r\n\r\nconst ProgressContainer = styled.div`\r\n  margin: 1rem 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst getFlowerStage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return null;\r\n  const stages = flowerTypes[flowerType].stages;\r\n  const levels = Object.keys(stages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return stages[levels[i]];\r\n    }\r\n  }\r\n  return stages[0];\r\n};\r\n\r\nconst getFlowerMessage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return \"An empty pot... ready for something special to grow.\";\r\n  \r\n  const messages = flowerTypes[flowerType].messages;\r\n  const levels = Object.keys(messages).map(Number).sort((a, b) => a - b);\r\n  \r\n  for (let i = levels.length - 1; i >= 0; i--) {\r\n    if (growthLevel >= levels[i]) {\r\n      return messages[levels[i]];\r\n    }\r\n  }\r\n  return messages[0];\r\n};\r\n\r\nconst getNextStageLevel = (currentLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const stages = Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .sort((a, b) => a - b);\r\n  \r\n  for (const level of stages) {\r\n    if (level > currentLevel) {\r\n      return level;\r\n    }\r\n  }\r\n  return stages[stages.length - 1];\r\n};\r\n\r\nconst getProgressPercentage = (growthLevel, flowerType) => {\r\n  if (!flowerType) return 0;\r\n  const currentLevel = growthLevel;\r\n  const nextLevel = getNextStageLevel(currentLevel, flowerType);\r\n  const prevLevel = Math.max(0, ...Object.keys(flowerTypes[flowerType].stages)\r\n    .map(Number)\r\n    .filter(level => level <= currentLevel));\r\n  \r\n  const progress = currentLevel - prevLevel;\r\n  const total = nextLevel - prevLevel;\r\n  return Math.min((progress / total) * 100, 100);\r\n};\r\n\r\nconst FlowerPot = () => {\r\n  const dispatch = useDispatch();\r\n  const { hasPlant, growthLevel, flowerType } = useSelector(state => state.flower);\r\n  const equippedItem = useSelector(state => state.inventory.equippedItem);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [showPickupWarning, setShowPickupWarning] = useState(false);\r\n  const [pendingPickup, setPendingPickup] = useState(false);\r\n\r\n  const getMaxGrowthLevel = () => {\r\n    if (!flowerType) return 0;\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number);\r\n    return Math.max(...stages);\r\n  };\r\n\r\n  const getProgressPercentage = () => {\r\n    const maxLevel = getMaxGrowthLevel();\r\n    return Math.min((growthLevel / maxLevel) * 100, 100);\r\n  };\r\n\r\n  const handlePlantClick = () => {\r\n    if (hasPlant) {\r\n      setShowConfirm(true);\r\n    } else if (equippedItem?.type === 'flower') {\r\n      dispatch(plantSeed());\r\n    } else {\r\n      dispatch(plantSeed());\r\n    }\r\n  };\r\n\r\n  const handleFlowerClick = () => {\r\n    if (!hasPlant) return;\r\n    setShowPickupWarning(true);\r\n  };\r\n\r\n  const handleConfirmPickup = () => {\r\n    const stages = Object.keys(flowerTypes[flowerType].stages).map(Number).sort((a, b) => a - b);\r\n    let currentStage = 0;\r\n    for (let stage of stages) {\r\n      if (growthLevel >= stage) {\r\n        currentStage = stage;\r\n      }\r\n    }\r\n    \r\n    const flowerItem = {\r\n      type: 'flower',\r\n      flowerType,\r\n      growthLevel,\r\n      stage: getFlowerStage(growthLevel, flowerType),\r\n      name: `${flowerType.charAt(0).toUpperCase() + flowerType.slice(1)} (Growth: ${growthLevel})`,\r\n      weight: flowerTypes[flowerType].weights[currentStage]\r\n    };\r\n    \r\n    dispatch(equipItem(flowerItem));\r\n    dispatch(removePlant());\r\n    setShowPickupWarning(false);\r\n  };\r\n\r\n  return (\r\n    <PotContainer>\r\n      <FlowerDisplay \r\n        clickable={hasPlant} \r\n        onClick={handleFlowerClick}\r\n      >\r\n        {hasPlant ? getFlowerStage(growthLevel, flowerType) : null}\r\n      </FlowerDisplay>\r\n      \r\n      {hasPlant && (\r\n        <ProgressContainer>\r\n          <div style={{ marginBottom: '0.5rem', fontSize: '0.8rem', color: '#666' }}>Growth</div>\r\n          <ProgressBar \r\n            now={getProgressPercentage()} \r\n            variant=\"success\"\r\n          />\r\n        </ProgressContainer>\r\n      )}\r\n      \r\n      <FlowerMessage>\r\n        {hasPlant ? getFlowerMessage(growthLevel, flowerType) : \"An empty pot... ready for something special to grow.\"}\r\n      </FlowerMessage>\r\n\r\n      <Button \r\n        variant={hasPlant ? \"outline-danger\" : \"outline-success\"}\r\n        onClick={handlePlantClick}\r\n        size=\"sm\"\r\n      >\r\n        {hasPlant ? 'Plant New Seed' : 'Plant Seed'}\r\n      </Button>\r\n\r\n      <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Replace Current Plant?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to remove the current plant and start fresh?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowConfirm(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={() => {\r\n            dispatch(removePlant());\r\n            dispatch(plantSeed());\r\n            setShowConfirm(false);\r\n          }}>\r\n            Replace Plant\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal show={showPickupWarning} onHide={() => setShowPickupWarning(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Pick Up Flower?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Warning: Once you pick up the flower, you cannot put it back in the pot. You'll need to plant a new seed to grow another flower.\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowPickupWarning(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleConfirmPickup}>\r\n            Pick Up Flower\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </PotContainer>\r\n  );\r\n};\r\n\r\nexport default FlowerPot; "],"names":["JesterContainer","styled","div","props","isDisappearing","JesterEmoji","span","JesterText","JESTER_LOCATIONS","nextLocation","message","_ref","currentLevel","dispatch","useDispatch","jesterLocation","useSelector","state","jester","currentLocation","setIsDisappearing","React","useEffect","incrementJesterEncounters","_jsxs","children","_jsx","Button","variant","onClick","handleTravel","setTimeout","setJesterLocation","size","Level11","LevelContainer","StyledCard","Card","Body","Title","Text","Jester","CenteredContainer","LevelButton","targetLevel","ShrineContainer","isMaxShrine","isComplete","isOverLimit","ShrineSymbol","ProgressText","requiredCount","maximumCount","overLimitMessage","unlockedAchievements","achievements","achievementCount","Object","keys","length","hasRequiredAchievements","debugConfig","isDebugMode","debugFeatures","unlockAllShrines","isAccessible","_Fragment","className","PotContainer","FlowerDisplay","clickable","FlowerMessage","ProgressContainer","getFlowerStage","growthLevel","flowerType","stages","flowerTypes","levels","map","Number","sort","a","b","i","getFlowerMessage","messages","FlowerPot","hasPlant","flower","equippedItem","inventory","showConfirm","setShowConfirm","useState","showPickupWarning","setShowPickupWarning","pendingPickup","setPendingPickup","handleFlowerClick","style","marginBottom","fontSize","color","ProgressBar","now","getProgressPercentage","maxLevel","getMaxGrowthLevel","Math","max","min","handlePlantClick","type","plantSeed","Modal","show","onHide","Header","closeButton","Footer","removePlant","handleConfirmPickup","currentStage","stage","flowerItem","name","charAt","toUpperCase","slice","weight","weights","equipItem"],"sourceRoot":""}