{"version":3,"file":"static/js/2166.27af0664.chunk.js","mappings":"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","sources":["components/Levels/Level18.js"],"sourcesContent":["import React from 'react';\r\nimport { Card, ProgressBar, Button } from 'react-bootstrap';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport HighlightableText from '../UI/HighlightableText';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport { handleLevelCollapse } from '../../utils/levelCollapse';\r\nimport { useDispatch } from 'react-redux';\r\nimport { UnstableText } from '../../utils/levelCollapse';\r\n\r\nconst Level18 = () => {\r\n  const dispatch = useDispatch();\r\n  const [temporalStability, setTemporalStability] = React.useState(100);\r\n  const [countdown, setCountdown] = React.useState(100);\r\n  const [glitchText, setGlitchText] = React.useState('');\r\n  const [targetLevel, setTargetLevel] = React.useState(1);\r\n  const [isFading, setIsFading] = React.useState(false);\r\n  const [isWarning, setIsWarning] = React.useState(false);\r\n\r\n  const getStabilityString = (level) => {\r\n    if (level >= 8) return 'HYPER-STABLE';\r\n    if (level >= 6) return 'STABLE';\r\n    if (level >= 4) return 'WARNING';\r\n    if (level >= 2) return 'CRITICAL';\r\n    return 'COLLAPSE IMMINENT';\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setGlitchText(generateGlitchText());\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const levelOptions = [1, 11, 111, 1111, -1, -11, -111];\r\n    const interval = setInterval(() => {\r\n      setTargetLevel(levelOptions[Math.floor(Math.random() * levelOptions.length)]);\r\n    }, Math.max(500, temporalStability * 10)); // Slower changes with higher stability\r\n\r\n    return () => clearInterval(interval);\r\n  }, [temporalStability]);\r\n\r\n  React.useEffect(() => {\r\n    if (temporalStability <= 20) {\r\n      setIsWarning(true);\r\n      const timer = setInterval(() => {\r\n        setCountdown(prev => {\r\n          const newCountdown = prev - 1;\r\n          if (newCountdown <= 0) {\r\n            clearInterval(timer);\r\n            handleLevelCollapse(dispatch, { real: 18, imag: 0 }, setIsFading);\r\n          }\r\n          return Math.max(0, newCountdown);\r\n        });\r\n      }, 100);\r\n      return () => clearInterval(timer);\r\n    } else {\r\n      setIsWarning(false);\r\n      setCountdown(100);\r\n    }\r\n  }, [temporalStability, dispatch]);\r\n\r\n  const generateGlitchText = () => {\r\n    const chars = '!@#$%^&*()';\r\n    return Array(5).fill(0).map(() => \r\n      chars[Math.floor(Math.random() * chars.length)]\r\n    ).join('');\r\n  };\r\n\r\n  const handleStabilityCheck = () => {\r\n    setTemporalStability(prev => {\r\n      const change = Math.random() > 0.5 ? 10 : -15; // More likely to decrease\r\n      return Math.min(100, Math.max(0, prev + change));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard fading={isFading}>\r\n        <Card.Body>\r\n          <Card.Title>\r\n            <HighlightableText text={`⚠️ TEMPORAL ANOMALY DETECTED - LEVEL ${glitchText} ⚠️`} size=\"medium\"/>\r\n          </Card.Title>\r\n          \r\n          <ProgressBar \r\n            now={temporalStability} \r\n            variant={temporalStability <= 20 ? \"danger\" : \"info\"}\r\n            label={`Temporal Stability: ${temporalStability}%`}\r\n            className=\"mb-3\"\r\n          />\r\n\r\n          {temporalStability <= 20 && (\r\n            <ProgressBar \r\n              now={countdown} \r\n              variant=\"danger\"\r\n              label={`Collapse in: ${countdown}%`}\r\n              className=\"mb-3\"\r\n            />\r\n          )}\r\n\r\n          <UnstableText isWarning={isWarning}>\r\n            <HighlightableText \r\n              text={isWarning ? \"CRITICAL: TEMPORAL COLLAPSE IMMINENT\" : \"Status: Semi-Stable\"}\r\n            />\r\n          </UnstableText>\r\n          <Card.Text>\r\n            <CenteredContainer>\r\n              <Button\r\n              onClick={handleStabilityCheck}\r\n            >\r\n              Adjust Temporal Stability\r\n            </Button>\r\n            </CenteredContainer>\r\n          </Card.Text>\r\n\r\n          <Card.Text>\r\n            <CenteredContainer>\r\n            <HighlightableText text=\"⚠️ UNSTABLE REALITY ZONE ⚠️\" />\r\n            </CenteredContainer>\r\n            <HighlightableText text=\"WARNING: Level 18 has been compromised by a miasmic time rift.\" />\r\n            <HighlightableText text=\"CAUSE: Excessive manipulation of game mechanics has created a small temporal paradox.\" />\r\n            <HighlightableText text=\"STATUS: The level as it was originally designed exists in a state of quantum uncertainty. Reality cohesion fluctuating. To prevent firm instanciation of paradoxes, stability has been reduced.\" />\r\n            <HighlightableText text=\"Notes: This area has been quarantined due to dangerous temporal fluctuations. Standard game physics may not apply.\" />\r\n          </Card.Text>\r\n          <CenteredContainer>\r\n\r\n            <LevelButton \r\n              targetLevel={targetLevel}\r\n            >\r\n              Proceed to Level {targetLevel}\r\n            </LevelButton>\r\n          </CenteredContainer>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level18;"],"names":["Level18","dispatch","useDispatch","temporalStability","setTemporalStability","React","countdown","setCountdown","glitchText","setGlitchText","targetLevel","setTargetLevel","isFading","setIsFading","isWarning","setIsWarning","interval","setInterval","generateGlitchText","clearInterval","levelOptions","Math","floor","random","length","max","timer","prev","newCountdown","handleLevelCollapse","real","imag","chars","Array","fill","map","join","_jsx","LevelContainer","children","StyledCard","fading","_jsxs","Card","Body","Title","HighlightableText","text","size","ProgressBar","now","variant","label","className","UnstableText","Text","CenteredContainer","Button","onClick","handleStabilityCheck","change","min","LevelButton"],"sourceRoot":""}