{"version":3,"file":"static/js/3875.c52aa801.chunk.js","mappings":"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","sources":["components/Characters/Jester.js","components/Levels/Level8.js","components/UI/AchievementShrine.js","../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/AccordionItemContext.js","../node_modules/react-bootstrap/esm/AccordionBody.js","../node_modules/react-bootstrap/esm/AccordionButton.js","../node_modules/react-bootstrap/esm/AccordionHeader.js","../node_modules/react-bootstrap/esm/AccordionItem.js","../node_modules/react-bootstrap/esm/Accordion.js","components/UI/NestedAccordion.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setJesterLocation} from '../../store/slices/jesterSlice';\r\nimport { incrementJesterEncounters } from '../../store/slices/gameSlice';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst JesterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.5rem;\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(240, 240, 240, 0.85));\r\n  padding: 0.5rem;\r\n  border-radius: 12px;\r\n  margin: 1.5rem 0;\r\n  box-shadow: \r\n    0 4px 6px rgba(0, 0, 0, 0.1),\r\n    0 1px 3px rgba(0, 0, 0, 0.08),\r\n    inset 0 1px 1px rgba(255, 255, 255, 0.5);\r\n  border: 1px solid rgba(0, 0, 0, 0.3);\r\n  backdrop-filter: blur(5px);\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n  animation: ${props => props.isDisappearing ? 'disappear 0.5s forwards' : 'none'};\r\n\r\n  @keyframes disappear {\r\n    0% {\r\n      opacity: 1;\r\n      transform: scale(1) rotate(0deg);\r\n    }\r\n    50% {\r\n      opacity: 0.5;\r\n      transform: scale(0.8) rotate(180deg);\r\n    }\r\n    100% {\r\n      opacity: 0;\r\n      transform: scale(0) rotate(360deg);\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: \r\n      0 6px 8px rgba(0, 0, 0, 0.12),\r\n      0 2px 4px rgba(0, 0, 0, 0.08),\r\n      inset 0 1px 1px rgba(255, 255, 255, 0.6);\r\n  }\r\n`;\r\n\r\nconst JesterEmoji = styled.span`\r\n  font-size: 2rem;\r\n  animation: float 2s ease-in-out infinite;\r\n\r\n  @keyframes float {\r\n    0%, 100% { transform: translateY(0); }\r\n    50% { transform: translateY(-10px); }\r\n  }\r\n`;\r\n\r\nconst JesterText = styled.div`\r\n  flex: 1;\r\n  font-style: italic;\r\n  color: #666;\r\n`;\r\n\r\nconst JESTER_LOCATIONS = {\r\n  '11': {\r\n    nextLocation: '8',\r\n    message: \"Ah, the sparse levels! *juggles some numbers* Did you know that if you look carefully at Level 8, you might find some interesting traveling techniques? *winks*\"\r\n  },\r\n  '8': {\r\n    nextLocation: '9',\r\n    message: \"Ohoho! Advanced techniques, indeed! But the real magic lies in the secrets... *pulls a rabbit from a hat* Why don't you check Level 9? There might be a mysterious box waiting to be unlocked! *disappears in a puff of smoke, then reappears* Oh, I'm still here!\"\r\n  },\r\n  '9': {\r\n    nextLocation: null,\r\n    message: \"The grand finale! *throws confetti* You've found all my hiding spots! But remember, in this world of numbers and mysteries, nothing is quite what it seems... *bows theatrically*\"\r\n  }\r\n};\r\n\r\nconst Jester = ({ currentLevel }) => {\r\n  const dispatch = useDispatch();\r\n  const jesterLocation = useSelector(state => state.jester.currentLocation);\r\n  const [isDisappearing, setIsDisappearing] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (jesterLocation === currentLevel) {\r\n      dispatch(incrementJesterEncounters());\r\n    }\r\n  }, [dispatch, jesterLocation, currentLevel]);\r\n\r\n  if (jesterLocation !== currentLevel) {\r\n    return null;\r\n  }\r\n\r\n  const handleTravel = () => {\r\n    setIsDisappearing(true);\r\n    setTimeout(() => {\r\n      const nextLocation = JESTER_LOCATIONS[jesterLocation].nextLocation;\r\n      dispatch(setJesterLocation(nextLocation));\r\n    }, 500); // Wait for animation to complete\r\n  };\r\n\r\n  return (\r\n    <JesterContainer isDisappearing={isDisappearing}>\r\n      <JesterEmoji>🃏</JesterEmoji>\r\n      <JesterText>\r\n        {JESTER_LOCATIONS[jesterLocation].message}\r\n      </JesterText>\r\n      <Button \r\n        variant=\"outline-primary\" \r\n        onClick={handleTravel}\r\n        size=\"sm\"\r\n      >\r\n        *poof*\r\n      </Button>\r\n    </JesterContainer>\r\n  );\r\n};\r\n\r\nexport default Jester;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentLevel } from '../../store';\r\nimport { Card } from 'react-bootstrap';\r\nimport { useAchievements } from '../../hooks/useAchievements';\r\nimport NestedAccordion from '../UI/NestedAccordion';\r\nimport LevelButton from '../UI/LevelButton';\r\nimport { LevelContainer, StyledCard, CenteredContainer } from './styles/CommonLevelStyles';\r\nimport { FaTrophy } from 'react-icons/fa';\r\nimport Scale from '../Storage/Scale';\r\nimport AchievementShrine from '../UI/AchievementShrine';\r\nimport HighlightableText from '../UI/HighlightableText';\r\nimport Jester from '../Characters/Jester';\r\n\r\nconst Level8 = () => {\r\n\r\n  return (\r\n    <LevelContainer>\r\n      <StyledCard>\r\n        <Card.Body>\r\n          <Card.Title><HighlightableText size=\"medium\" text=\"Advanced Traveling Techniques\"/></Card.Title>\r\n          <Card.Text>\r\n              <HighlightableText text=\"Did you know that buttons can be held just like items? Just right click a button, then carry it around until you need it!\"/>\r\n              </Card.Text>\r\n          <Jester currentLevel=\"8\" />\r\n          <AchievementShrine requiredCount={15}>\r\n            <Card.Text>\r\n              <HighlightableText text=\"By now, you should know about buttons hidden in plain sight. If not, look at Level 7 again! But did you know that buttons can be created from anywhere?\"/>\r\n              </Card.Text>\r\n            \r\n            <Card.Text>\r\n              <HighlightableText text=\"Just find some text which has a number in it, highlight, and click it to travel to that level!\"/>\r\n              <HighlightableText text=\"For example, this text has a 10 in it! That's one of the levels you've already been to!\"/>\r\n            </Card.Text>\r\n\r\n          </AchievementShrine>\r\n          <CenteredContainer>\r\n          <LevelButton targetLevel={0}>Level 0</LevelButton>\r\n              <LevelButton targetLevel={1}>Level 1</LevelButton>\r\n            \r\n              <LevelButton targetLevel={2}>Level 2</LevelButton>\r\n            \r\n              <LevelButton targetLevel={3}>Level 3</LevelButton>\r\n            </CenteredContainer>\r\n            <CenteredContainer>\r\n              <LevelButton targetLevel={4}>Level 4</LevelButton>\r\n            \r\n              <LevelButton targetLevel={5}>Level 5</LevelButton>\r\n           \r\n              <LevelButton targetLevel={6}>Level 6</LevelButton>\r\n          \r\n              <LevelButton targetLevel={7}>Level 7</LevelButton>\r\n            </CenteredContainer>\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </LevelContainer>\r\n  );\r\n};\r\n\r\nexport default Level8; ","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from 'react-bootstrap';\r\nimport allAchievements from '../../data/achievements';\r\nimport LevelButton from './LevelButton';\r\nimport debugConfig from '../../config/debug';\r\n\r\nconst ShrineContainer = styled.div`\r\n  width: 100%;\r\n  margin: 2rem auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border: 2px solid rgba(0, 0, 0, 0.1);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.isMaxShrine && `\r\n    background: rgba(70, 0, 70, 0.1);\r\n    border: 2px solid purple;\r\n  `}\r\n  \r\n  ${props => props.isComplete && !props.isMaxShrine && `\r\n    background: rgba(255, 215, 0, 0.1);\r\n    border-color: gold;\r\n  `}\r\n\r\n  ${props => props.isOverLimit && `\r\n    background: rgba(255, 0, 0, 0.1);\r\n    border-color: red;\r\n  `}\r\n`;\r\n\r\nconst ShrineSymbol = styled.div`\r\n  font-size: 3rem;\r\n  margin: 1rem 0;\r\n  color: ${props => {\r\n    if (props.isMaxShrine) return 'purple';\r\n    if (props.isOverLimit) return '#ff0000';\r\n    if (props.isComplete) return 'gold';\r\n    return '#666';\r\n  }};\r\n`;\r\n\r\nconst ProgressText = styled.div`\r\n  color: ${props => props.isOverLimit ? 'red' : 'inherit'};\r\n  font-weight: ${props => props.isOverLimit ? 'bold' : 'normal'};\r\n`;\r\n\r\nconst AchievementShrine = ({ \r\n  requiredCount = null,\r\n  maximumCount = null,\r\n  children,\r\n  overLimitMessage = \"Too many achievements! You must prestige to access this content.\"\r\n}) => {\r\n  const unlockedAchievements = useSelector(state => state.achievements.achievements);\r\n  const achievementCount = Object.keys(unlockedAchievements).length;\r\n  \r\n  const isMaxShrine = maximumCount !== null;\r\n  const isOverLimit = isMaxShrine && achievementCount > maximumCount;\r\n  const hasRequiredAchievements = !isMaxShrine && (\r\n    debugConfig.isDebugMode && debugConfig.debugFeatures.unlockAllShrines ? \r\n    true : achievementCount >= requiredCount\r\n  );\r\n  \r\n  const isAccessible = isMaxShrine ? !isOverLimit : hasRequiredAchievements;\r\n\r\n  return (\r\n    <ShrineContainer>\r\n      <StyledCard isComplete={isAccessible} isOverLimit={isOverLimit} isMaxShrine={isMaxShrine}>\r\n        <Card.Body>\r\n          <ShrineSymbol \r\n            isComplete={isAccessible} \r\n            isOverLimit={isOverLimit}\r\n            isMaxShrine={isMaxShrine}\r\n          >\r\n            {isMaxShrine ? '🔮' : (isAccessible ? '🔓' : '🔒')}\r\n          </ShrineSymbol>\r\n          \r\n          <Card.Title>\r\n            {isMaxShrine ? 'Prestige Shrine' : 'Achievement Shrine'}\r\n          </Card.Title>\r\n          \r\n          <ProgressText isOverLimit={isOverLimit}>\r\n            {isMaxShrine ? (\r\n              <>Current: {achievementCount} / Maximum: {maximumCount}</>\r\n            ) : (\r\n              <>Progress: {achievementCount} / {requiredCount}</>\r\n            )}\r\n          </ProgressText>\r\n          \r\n          {isMaxShrine ? (\r\n            isOverLimit ? (\r\n              <Card.Text className=\"text-danger\">\r\n                {overLimitMessage}\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          ) : (\r\n            !hasRequiredAchievements ? (\r\n              <Card.Text>\r\n                Return when you have unlocked at least {requiredCount} achievements...\r\n              </Card.Text>\r\n            ) : (\r\n              <Card.Text>\r\n                {children}\r\n              </Card.Text>\r\n            )\r\n          )}\r\n        </Card.Body>\r\n      </StyledCard>\r\n    </ShrineContainer>\r\n  );\r\n};\r\n\r\nexport default AchievementShrine;","\"use client\";\n\nimport * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null || onSelect(eventKeyPassed, e);\n    onClick == null || onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});","import React from 'react';\r\nimport { Accordion } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport HighlightableText from './HighlightableText';\r\n\r\nconst AccordionWrapper = styled.div`\r\n  margin: 0.5rem 0;\r\n`;\r\n\r\nconst TextWrapper = styled.div`\r\n  padding: 0.5rem;\r\n`;\r\nconst StyledAccordion = styled(Accordion)`\r\n  .accordion-button:not(.collapsed) {\r\n    color: inherit;\r\n    background-color: rgba(0, 0, 0, 0.03);\r\n    box-shadow: none;\r\n  }\r\n\r\n  .accordion-button:focus {\r\n    box-shadow: none;\r\n    border-color: rgba(0, 0, 0, 0.125);\r\n  }\r\n\r\n  .accordion-button::after {\r\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");\r\n  }\r\n\r\n  .accordion-button:not(.collapsed)::after {\r\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");\r\n  }\r\n`;\r\nconst NestedAccordion = ({ \r\n  data, \r\n  openSections = [], \r\n  visitedSections = [], \r\n  onToggle,\r\n  depth = 0, \r\n  path = '' \r\n}) => {\r\n  if (Array.isArray(data)) {\r\n    if (data.length === 0) {\r\n      return (\r\n        <TextWrapper>\r\n          <HighlightableText text=\"Keep searching...\" />\r\n        </TextWrapper>\r\n      );\r\n    }\r\n\r\n    if (typeof data[0] === 'string' || React.isValidElement(data[0])) {\r\n      return (\r\n        <TextWrapper>\r\n          {typeof data[0] === 'string' ? (\r\n            <HighlightableText text={data.join(' ')} />\r\n          ) : (\r\n            data[0]\r\n          )}\r\n        </TextWrapper>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <StyledAccordion \r\n        activeKey={openSections.filter(key => key.startsWith(path))}\r\n        alwaysOpen\r\n      >\r\n        {data.map((item, index) => {\r\n          const currentPath = path ? `${path}-${index}` : `${index}`;\r\n          const isVisited = visitedSections.includes(currentPath);\r\n          \r\n          return (\r\n            <Accordion.Item \r\n              key={currentPath} \r\n              eventKey={currentPath}\r\n              className={isVisited ? 'visited' : ''}\r\n            >\r\n              <Accordion.Header \r\n                onClick={() => onToggle(currentPath)}\r\n              />\r\n              <Accordion.Body>\r\n                <NestedAccordion \r\n                  data={item}\r\n                  openSections={openSections}\r\n                  visitedSections={visitedSections} \r\n                  onToggle={onToggle}\r\n                  depth={depth + 1}\r\n                  path={currentPath}\r\n                />\r\n              </Accordion.Body>\r\n            </Accordion.Item>\r\n          );\r\n        })}\r\n      </StyledAccordion>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default NestedAccordion; "],"names":["JesterContainer","styled","div","props","isDisappearing","JesterEmoji","span","JesterText","JESTER_LOCATIONS","nextLocation","message","_ref","currentLevel","dispatch","useDispatch","jesterLocation","useSelector","state","jester","currentLocation","setIsDisappearing","React","useEffect","incrementJesterEncounters","_jsxs","children","_jsx","Button","variant","onClick","handleTravel","setTimeout","setJesterLocation","size","Level8","LevelContainer","StyledCard","Card","Body","Title","HighlightableText","text","Text","Jester","AchievementShrine","requiredCount","CenteredContainer","LevelButton","targetLevel","ShrineContainer","isMaxShrine","isComplete","isOverLimit","ShrineSymbol","ProgressText","maximumCount","overLimitMessage","unlockedAchievements","achievements","achievementCount","Object","keys","length","hasRequiredAchievements","debugConfig","isDebugMode","debugFeatures","unlockAllShrines","isAccessible","_Fragment","className","isAccordionItemSelected","activeEventKey","eventKey","Array","isArray","includes","context","displayName","AccordionCollapse","ref","as","Component","bsPrefix","useContext","AccordionContext","useBootstrapPrefix","Collapse","in","classNames","only","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","accordionOnClick","onSelect","alwaysOpen","e","eventKeyPassed","filter","k","useAccordionButton","type","AccordionHeader","AccordionItem","contextValue","useMemo","Provider","value","Accordion","activeKey","flush","controlledProps","useUncontrolled","prefix","assign","Item","Header","TextWrapper","StyledAccordion","NestedAccordion","data","openSections","visitedSections","onToggle","depth","path","join","key","startsWith","map","item","index","currentPath","isVisited"],"sourceRoot":""}